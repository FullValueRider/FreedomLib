[Description("A Module for things that should have been part of VBA")]
Class Sys
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Option Explicit
    option base 0

    
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
' Constants
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
    Private Const MY_LOC                            As String = "FreedomLib.FBase.Sys."

    Public Const MaxByte                            As Byte = &HFF
    Public Const MinByte                            As Byte = &H00

    Public Const MaxInteger                         As Integer = &H7FFF
    Public Const MinInteger                         As Integer = &H8000

    Public Const MaxLong                            As Long = &H7FFFFFFF
    Public Const MinLong                            As Long = &H80000000

    Public Const MaxLongLong                        As LongLong = &H7FFFFFFFFFFFFFFF
    Public Const MinLongLong                        As LongLong = &H8000000000000000

    Public Const MaxSingle                          As Single = 3.402823E38
    Public Const FirstPosSingle                     As Single = 1.401298E-45
    Public Const MinSingle                          As Single = -3.402823E38
    Public Const FirstNegSingle                     As Single = -1.401298E-45

    Public Const MaxDate                            As Date = -657434
    Public Const MinDate                            As Date = 2958465

    ' The following definitions require the use of string coercion to avoid 
    ' the literal value being decoded as a value of Type Single.
    Public Const MaxDouble                          As Double = "1.79769313486232E308"
    Public Const FirstPosDouble                     As Double = "4.94065645841247E-324"
    Public Const MinDouble                          As Double = "-1.79769313486231E308"
    Public Const FirstNegDouble                     As Double = "-4.94065645841247E-324"

    Public Const MaxCurrency                        As Currency = "922,337,203,685,477.5807"
    Public Const MinCurrency                        As Currency = "-922,337,203,685,477.5808"

    Public Const MaxDecimal                         As Decimal = "79,228,162,514,264,337,593,543,950,335"
    Public Const FirstPosDecimal                    As Decimal = "0.0000000000000000000000000001"
    Public Const MinDecimal                         As Decimal = "-79,228,162,514,264,337,593,543,950,335"
    Public Const FirstNegDecimal                    As Decimal = "-0.0000000000000000000000000001"

'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
' Methods
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
    Public Sub Swap(ByRef iopLHS As Variant, ByRef iopRHS As Variant)
    	
        Dim myTemp As Variant = 0 ' value assigned to ensure memory is allocated
        Unsafe.VariantCopy myTemp, iopLHS
        Unsafe.VariantCopy iopLHS, iopRHS
        Unsafe.VariantCopy iopRHS, myTemp
            
    End Sub

    
    [Description("Returns a one dimension array by iterating th einput array using for each")]
    Public Function ToArray1D(ByRef ipArray As Variant) As Variant
    	Dim myC As Collection = New Collection
        Dim myItem As Variant
        For Each myItem In ipArray
        	myC.Add myItem
        Next
        Return myC.Items
    End Function
    
    
    [Description("Resturn as collection populated by using for each over the input array")]
    Public Function ToCollection(ByRef ipArray As Variant) As Variant
    	Dim myC As Collection = New Collection
        Dim myItem As Variant
        For Each myItem In ipArray
        	myC.Add myItem
        Next
        Return myC
    End Function
    
    
    [Description(" Returns an ArrayList populated by using for each over the input array")]
    Public Function ToArrayList(ByRef ipArray As Variant) As Variant
    	Dim myAL As ArrayList = New ArrayList
        Dim myItem As Variant
        For Each myItem In ipArray
        	myAL.Add myItem
        Next
        Return myAL
    End Function
    
    [Description("Returns a Scripting.Dictionary populated using for each over the input array.  The array items are keys, the items are the Dictionary count when the key was added")]
    Public Function ToDictionaryItemsVSCount(ByRef ipArray As Variant) As Dictionary
    	Dim myD As Dictionary = New Dictionary
        Dim myItem As Variant
        For Each myItem In ipArray
        	myD.Add myItem, myD.Count
        Next
        Return myD
    End Function
    
    [Description("Returns a Scripting.Dictioanry populated using for each over the input array. Keys are the Dictionary count when the Items were added")]
    Public Function ToDictionaryCountVsItems(ByVal ipArray As Variant) As Dictionary
    	Dim myD As Dictionary = New Dictionary
        Dim myItem As Variant
        For Each myItem In ipArray
        	myD.Add myD.Count, myItem
        Next
        Return myD
    End Function
    
  

    ' Public Function ObjVal(ByRef ipObject As Object) As Variant
    	
    '     Dim myA() As Variant
        
    '     On Error Resume Next
    '     myA = Array(ipObject.ToString)
    '     If Err.Number = 0 Then
    '     	On Error GoTo 0
    '     	Return Array(True, myA(0))
    '     End If
        
    '     On Error GoTo 0
    '     On Error Resume Next
    '     myA = Array(ipObject.ToArray)
    '     If Err.Number = 0 Then
    '     On Error GoTo 0
    '         Return Array(True, myA(0))
    '     End If
            
    '     On Error GoTo 0
    '     On Error Resume Next
    '     myA = Array(ipObject.ToCollection)
    '     If Err.Number = 0 Then
    '         On Error GoTo 0
    '     	Return Array(True, myA(0))
    '     End If
        
    '     On Error GoTo 0
    '     On Error Resume Next
    '     myA = Array(ipObject.ToSeq)
    '     If Err.Number = 0 Then
    '         On Error GoTo 0
    '         Return Array(True, myA(0))
    '     End If
        
    '     On Error GoTo 0
    '     On Error Resume Next
    '     myA = Array(ipObject.Json)
    '     If Err.Number = 0 Then
    '         On Error GoTo 0
    '         Return Array(True, myA(0))
    '     End If
        
    '     On Error GoTo 0
    '     On Error Resume Next
    '     myA = Array(ipObject.value)
    '     If Err.Number = 0 Then
    '     	Return Array(True, myA(0))
    '     End If
        
    '     On Error GoTo 0
    '     On Error Resume Next
    '     myA = Array((ipObject)) ' Attemp to force defaultmemeber action
    '     If Err.Number = 0 Then
    '     	If VBA.TypeName(myA(0)) <> VBA.TypeName(ipObject) Then
    '         	On Error GoTo 0
    '             Return Array(True, myA(0))
    '     	End If
    '     End If
        
    '     On Error GoTo 0
    '     Return Array(False, VBA.ObjPtr(ipObject))
        
    ' End Function
    
    ' One of the many issues with VBA is that it supports methods with a variable number of parameters via the ParamArray.,
    ' However, there is no 'splat' operater so Paramarrays cannot be forwarded to methods expecting a paramArray
    ' To get around this limitation we use the resolve Splat method which assumes that if the FPA (forwarded ParamArray)
    ' contains a single item which is itself an array then the intent is to interpret FPA(0) as a paramarray
    ' On the occasion that single item processing is not required the Item should be encapsulated as an array
    ' e.g. Method(Item), use Method(Array(Item)).

    [Description("If paramarray is an array which contains a single item which is an array, it is assumend to be a forwarded paramarray, so paramarray is replaced by paramArray(0)")]
    Public Sub Splat(ByRef iopFPA As Variant)
    
        ' splat is a reference to the splat (spread/ellipsis)  operator '...' used in some other languages.
    
        Contract.IsPArray iopFPA, CurrentComponentName & Chars.tbPeriod & CurrentProcedureName
        
        ' return iopFPA(0) is iopFPA only holds one item
        If UBound(iopFPA) = LBound(iopFPA) Then
            If VBA.IsArray(iopFPA(0)) Then
                iopFPA = iopFPA(0)
            End If
        End If
    
    End Sub
    
    ' deprecated as type info now merged which provides this information
    ' Public Function GetArrayInfo(ByRef ipItem As Variant) As ArrayInfo
    
    '     Contract.IsPArray ipItem, MY_LOC & CurrentProcedureName
    '     Dim myInfo As ArrayInfo
    '     myInfo.Ranks = Unsafe.ArrayDims(ipItem)
    '     ReDim myInfo.Count(0 To myInfo.Ranks)
    '     ReDim myInfo.FirstIndex(1 To myInfo.Ranks)
    '     ReDim myInfo.LastIndex(1 To myInfo.Ranks)
        
    '     Dim myIndex As Long
    '     Dim myCount As Long = 1
    '     For myIndex = 1 To myInfo.Ranks
             
    '         With myInfo
    '             .FirstIndex(myIndex) = LBound(ipItem, myIndex)
    '             .LastIndex(myIndex) = UBound(ipItem, myIndex)
    '             .Count(myIndex) =.LastIndex(myIndex) -.FirstIndex(myIndex) + 1
    '             .Count(0) *=.Count(myIndex)
    '         End With
                            
    '     Next
        
    '     Return myInfo
        
    ' End Function
    
End Class