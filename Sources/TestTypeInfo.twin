Module TestTypeInfo

    Option Explicit
    Option Private Module

    Private myC As Collection
    Private myUdt As TestUDT
    Private myAL As ArrayList
    Private myD As Dictionary
    Private myQ As Queue
    Private myStk As Stack
    Private myH As cHashD
    'Private myS As seqA
    'Private myK As KvpA
    #If twinbasic Then
        'Do nothing
    #Else


        '@ModuleInitialize
    Private Sub ModuleInitialize()
        GlobalAssert
        'this method runs once per module.
        '    Set Assert = CreateObject("Rubberduck.AssertClass")
        '    Set Fakes = CreateObject("Rubberduck.FakesProvider")
    End Sub


    '@ModuleCleanup
    Private Sub ModuleCleanup()
        'this method runs once per module.
        '    Set Assert = Nothing
        '    Set Fakes = Nothing
    End Sub


    '@TestInitialize
    Private Sub TestInitialize()
        'This method runs before every test in the module..
    End Sub


    '@TestCleanup
    Private Sub TestCleanup()
        'this method runs after every test in the module.
    End Sub


    #End If

    Public Type TestUDT
    	x As Long
        y As Long
    End Type
    
    Private Sub InitialiseTestEntities()
        
        myUdt.x = 42
        myUdt.y = 84
        
        Set myC = New Collection
        myC.Add 10
        myC.Add 20
        myC.Add 30
        
        Set myD = New Dictionary
        myD.Add "One", 10
        myD.Add "Two", 20
        myD.Add "Three", 30
        
        Set myQ = Queue()
        myQ.Enqueue 10
        myQ.Enqueue 30
        myQ.Enqueue 30
        
        Set myStk = Stack()
        myStk.Push 10
        myStk.Push 20
        myStk.Push 30
        
        Set myAL = New ArrayList
        myAL.Add 10
        myAL.Add 20
        myAL.Add 30
        
        Set myH = New cHashD
        myH.Add "One", 10
        myH.Add "Two", 20
        myH.Add "Three", 30
        
    End Sub
    
    
    Public Sub TypeInfoTests()
        
        Debug.Print "TypeInfo",
        InitialiseTestEntities
        Test01_FName
        Test02_VBAIsNotComplements
        
        ' Tests for Ids
        Test03_NullIds
        Test04_NothingIds
        Test05_EmptyIds
        Test06_ErrorIds
        Test07_ByteIds
        Test08_IntegerIds
        Test09_LongIds
        Test10_LongLongIds
        Test11_SingleIds
        Test12_DoubleIds
        Test13_CurrencyIds
        Test14_DecimalIds
        Test15_DateIds
        Test16_StringIds
        Test17_UserDefinedTypeIds
        'Test18a_COmpoundObjectIds
        'Test18b_HolderObjectIds
        Test19a_nArrayIds
        Test19b_UArrayIds
        Test19c_PArrayIds
        Test20_StackIds
        Test21_QueueIds
        Test22_ArrayListIds
        Test23_DictionaryIds
        Test24_cHashDIds
        
        ' Tests for Holders
        'Test25_HolderIsIndexable
        ' Test26_HolderContainer
        ' Test27_HolderContainer
        Test28_HolderItemByIndex
        'Test29_HolderMapper ' can't implement until we add seq and kvp classes.
        
        ' Tests for Group
        Test30_GroupIsAdmin
        Test31_GroupIsNumber
        Test32_GroupIsBoolean
        Test33_GroupIsString
        ' no test for udt
        Test34_GroupIsItemObject
        Test35_GroupIsInitialisedArray
        Test35_GroupIsItemByIndex1
        Test36_GroupIsItemByIndex0
        Test37_GroupIsItemByKey
        Test38_GroupIsItemByToArray
        Debug.Print vbTab, vbTab, vbTab, "Testing completed"

    End Sub


    '@TestMethod("Var")
    Private Sub Test01_FName()

        On Error GoTo TestFail
    
        'Arrange:
        '                                 0       1        2        3          4          5       6          7       8           9         10        11          12         13      14        15     16            17       18            19            20       21       22           23        
        Dim myExpected As Variant = Array("null", "empty", "error", "errobject", "nothing", "boolean", "byte", "integer", "long", "longlong", "single", "double", "currency", "decimal", "date", "string", "userdefinedtype", "compoundobject", "narray", "uarray", "parray", "collection", "dictionary", "queue", "stack", "arraylist", "chashd") ', "seq", "kvp")
        Dim myResult As Variant
        Dim myA() As Long
        Dim myB As Variant = Array()
        Dim myC As Variant = Array(1, 2, 3, 4, 5)
        'Act: 
        Dim myColl As Collection = New Collection
        With myColl
        	.Add TypeInfo.FName(Null)
            .Add TypeInfo.FName(Empty)
            .Add TypeInfo.FName(VBA.CVErr(42))
            .Add TypeInfo.FName(Err)
            .Add TypeInfo.FName(Nothing)
            .Add TypeInfo.FName(True)
            .Add TypeInfo.FName(VBA.CByte(42))
            .Add TypeInfo.FName(VBA.CInt(42))
            .Add TypeInfo.FName(VBA.CLng(42))
            .Add TypeInfo.FName(VBA.CLngLng(42))
            .Add TypeInfo.FName(VBA.CSng(42))
            .Add TypeInfo.FName(VBA.CDbl(42))
            .Add TypeInfo.FName(VBA.CCur(42))
            .Add TypeInfo.FName(VBA.CDec(42))
            .Add TypeInfo.FName(VBA.CVDate(42))
            .Add TypeInfo.FName("42")
            .Add TypeInfo.FName(myUdt)
            .Add TypeInfo.FName(PointXY(2, 4))
            .Add TypeInfo.FName(myA)
            .Add TypeInfo.FName(myB)
            .Add TypeInfo.FName(myC)
            .Add TypeInfo.FName(myColl)
            .Add TypeInfo.FName(myD)
            .Add TypeInfo.FName(myQ)
            .Add TypeInfo.FName(myStk)
            .Add TypeInfo.FName(myAL)
            .Add TypeInfo.FName(myH)
        End With
        
        
        myResult = myColl.Items
        ' Fmt.Dbg "{0}{nl}{1}", myExpected, myResult
       ' tests for seq and kvp cannot be implemented yet not implmented
        'Assert:
        
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test02_VBAIsNotComplements()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(False, True, False, False, False, True, False)
        Dim myResult As Variant: ReDim myResult(0 To 6)
    
        'Act:

        myResult(0) = TypeInfo.IsNotNull(Null)              ' False
        myResult(1) = TypeInfo.IsNothing(Nothing)           ' True
        myResult(2) = TypeInfo.IsNotNothing(Nothing)
        myResult(3) = TypeInfo.IsNotEmpty(Empty)
        myResult(4) = TypeInfo.IsNotError(VBA.CVErr(42))
        myResult(5) = TypeInfo.IsNotDate(42)                ' Numbers are not dates but can be assigned to dates.
        myResult(6) = TypeInfo.IsNotObject(myC)
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub


    '@TestMethod("Var")
    Private Sub Test03_NullIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Null, vbNull, e_Group.m_Admin, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(Null)
        myResult(1) = TypeInfo.VBAId(Null)
        myResult(2) = TypeInfo.GroupId(Null)
        myResult(3) = TypeInfo.EntityId(Null)
        myResult(4) = TypeInfo.HolderId(Null)
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test04_NothingIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Nothing, vbObject, e_Group.m_Admin, e_Entity.m_Object, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(Nothing)
        myResult(1) = TypeInfo.VBAId(Nothing)
        myResult(2) = TypeInfo.GroupId(Nothing)
        myResult(3) = TypeInfo.EntityId(Nothing)
        myResult(4) = TypeInfo.HolderId(Nothing)
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test05_EmptyIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Empty, vbEmpty, e_Group.m_Admin, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(Empty)
        myResult(1) = TypeInfo.VBAId(Empty)
        myResult(2) = TypeInfo.GroupId(Empty)
        myResult(3) = TypeInfo.EntityId(Empty)
        myResult(4) = TypeInfo.HolderId(Empty)
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub


    '@TestMethod("Var")
    Private Sub Test06_ErrorIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_CVErr, vbError, e_Group.m_Admin, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CVErr(42))
        myResult(1) = TypeInfo.VBAId(VBA.CVErr(42))
        myResult(2) = TypeInfo.GroupId(VBA.CVErr(42))
        myResult(3) = TypeInfo.EntityId(VBA.CVErr(42))
        myResult(4) = TypeInfo.HolderId(VBA.CVErr(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub


    '@TestMethod("Var")
    Private Sub Test07_ByteIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Byte, vbByte, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CByte(42))
        myResult(1) = TypeInfo.VBAId(VBA.CByte(42))
        myResult(2) = TypeInfo.GroupId(VBA.CByte(42))
        myResult(3) = TypeInfo.EntityId(VBA.CByte(42))
        myResult(4) = TypeInfo.HolderId(VBA.CByte(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test08_IntegerIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Integer, vbInteger, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CInt(42))
        myResult(1) = TypeInfo.VBAId(VBA.CInt(42))
        myResult(2) = TypeInfo.GroupId(VBA.CInt(42))
        myResult(3) = TypeInfo.EntityId(VBA.CInt(42))
        myResult(4) = TypeInfo.HolderId(VBA.CInt(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test09_LongIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Long, vbLong, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CLng(42))
        myResult(1) = TypeInfo.VBAId(VBA.CLng(42))
        myResult(2) = TypeInfo.GroupId(VBA.CLng(42))
        myResult(3) = TypeInfo.EntityId(VBA.CLng(42))
        myResult(4) = TypeInfo.HolderId(VBA.CLng(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test10_LongLongIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_LongLong, vbLongLong, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CLngLng(42))
        myResult(1) = TypeInfo.VBAId(VBA.CLngLng(42))
        myResult(2) = TypeInfo.GroupId(VBA.CLngLng(42))
        myResult(3) = TypeInfo.EntityId(VBA.CLngLng(42))
        myResult(4) = TypeInfo.HolderId(VBA.CLngLng(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test11_SingleIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Single, vbSingle, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CSng(42))
        myResult(1) = TypeInfo.VBAId(VBA.CSng(42))
        myResult(2) = TypeInfo.GroupId(VBA.CSng(42))
        myResult(3) = TypeInfo.EntityId(VBA.CSng(42))
        myResult(4) = TypeInfo.HolderId(VBA.CSng(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test12_DoubleIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Double, vbDouble, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CDbl(42))
        myResult(1) = TypeInfo.VBAId(VBA.CDbl(42))
        myResult(2) = TypeInfo.GroupId(VBA.CDbl(42))
        myResult(3) = TypeInfo.EntityId(VBA.CDbl(42))
        myResult(4) = TypeInfo.HolderId(VBA.CDbl(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test13_CurrencyIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Currency, vbCurrency, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CCur(42))
        myResult(1) = TypeInfo.VBAId(VBA.CCur(42))
        myResult(2) = TypeInfo.GroupId(VBA.CCur(42))
        myResult(3) = TypeInfo.EntityId(VBA.CCur(42))
        myResult(4) = TypeInfo.HolderId(VBA.CCur(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test14_DecimalIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Decimal, vbDecimal, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CDec(42))
        myResult(1) = TypeInfo.VBAId(VBA.CDec(42))
        myResult(2) = TypeInfo.GroupId(VBA.CDec(42))
        myResult(3) = TypeInfo.EntityId(VBA.CDec(42))
        myResult(4) = TypeInfo.HolderId(VBA.CDec(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test15_DateIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Date, vbDate, e_Group.m_Number, e_Entity.m_Simple, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(VBA.CDate(42))
        myResult(1) = TypeInfo.VBAId(VBA.CDate(42))
        myResult(2) = TypeInfo.GroupId(VBA.CDate(42))
        myResult(3) = TypeInfo.EntityId(VBA.CDate(42))
        myResult(4) = TypeInfo.HolderId(VBA.CDate(42))
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test16_StringIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_String, vbString, e_Group.m_Holder, e_Entity.m_Simple, e_Holder.m_String)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id("42")
        myResult(1) = TypeInfo.VBAId("42")
        myResult(2) = TypeInfo.GroupId("42")
        myResult(3) = TypeInfo.EntityId("42")
        myResult(4) = TypeInfo.HolderId("42")
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test17_UserDefinedTypeIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_UDT, vbUserDefinedType, e_Group.m_UDT, e_Entity.m_UserDefinedType, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(myUdt)
        myResult(1) = TypeInfo.VBAId(myUdt)
        myResult(2) = TypeInfo.GroupId(myUdt)
        myResult(3) = TypeInfo.EntityId(myUdt)
        myResult(4) = TypeInfo.HolderId(myUdt)
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    ' '@TestMethod("Var")
    ' Private Sub Test18a_COmpoundObjectIds()

    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(e_Id.m_MVObject, vbObject, e_Group.m_ItemObject, e_Entity.m_Object, e_Holder.m_IsNotHolder)
    '     Dim myResult As Variant: ReDim myResult(0 To 4)
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array

    '     myResult(0) = TypeInfo.Id(PointXY(2, 4))
    '     myResult(1) = TypeInfo.VBAId(PointXY(2, 4))
    '     myResult(2) = TypeInfo.GroupId(PointXY(2, 4))
    '     myResult(3) = TypeInfo.EntityId(PointXY(2, 4))
    '     myResult(4) = TypeInfo.HolderId(PointXY(2, 4))
       
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    ' '@TestMethod("Var")
    ' Private Sub Test18b_HolderObjectIds()

    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(e_Id.m_HolderObject, vbObject, e_Group.m_ItemByIndex1, e_Entity.m_Holder, e_Holder.m_Indexable, e_Holder.m_Assembly, e_Holder.m_ItemByPKey)
    '     Dim myResult As Variant: ReDim myResult(0 To 4)
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myC As Collection = New Collection
    '     myC.Add 10
    '     myC.Add 20
    '     myC.Add 30
    '     myC.Add 42
    '     myC.Add 50
    '     myResult(0) = TypeInfo.Id(myC)
    '     myResult(1) = TypeInfo.VBAId(myC)
    '     myResult(2) = TypeInfo.GroupId(myC)
    '     myResult(3) = TypeInfo.EntityId(myC)
    '     myResult(4) = TypeInfo.HolderId(myC)
       
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test19a_nArrayIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_NArray, vbArray, e_Group.m_Holder, e_Entity.m_Array, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act: 
        Dim myA() As Variant
        myResult(0) = TypeInfo.Id(myA)
        myResult(1) = TypeInfo.VBAId(myA)
        myResult(2) = TypeInfo.GroupId(myA)
        myResult(3) = TypeInfo.EntityId(myA)
        myResult(4) = TypeInfo.HolderId(myA)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test19b_UArrayIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_UArray, vbArray, e_Group.m_Holder, e_Entity.m_Array, e_Holder.m_IsNotHolder)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act: 
        Dim myA As Variant = Array()
        myResult(0) = TypeInfo.Id(myA)
        myResult(1) = TypeInfo.VBAId(myA)
        myResult(2) = TypeInfo.GroupId(myA)
        myResult(3) = TypeInfo.EntityId(myA)
        myResult(4) = TypeInfo.HolderId(myA)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test19c_PArrayIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_PArray, vbArray, e_Group.m_Holder, e_Entity.m_Array, e_Holder.m_Array)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act: 
        Dim myA As Variant = Array(1, 2, 3, 4, 5)
        myResult(0) = TypeInfo.Id(myA)
        myResult(1) = TypeInfo.VBAId(myA)
        myResult(2) = TypeInfo.GroupId(myA)
        myResult(3) = TypeInfo.EntityId(myA)
        myResult(4) = TypeInfo.HolderId(myA)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test20_StackIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Stack, vbObject, e_Group.m_Holder, e_Entity.m_Object, e_Holder.m_ItemByToArray)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(myStk)
        myResult(1) = TypeInfo.VBAId(myStk)
        myResult(2) = TypeInfo.GroupId(myStk)
        myResult(3) = TypeInfo.EntityId(myStk)
        myResult(4) = TypeInfo.HolderId(myStk)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test21_QueueIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Queue, vbObject, e_Group.m_Holder, e_Entity.m_Object, e_Holder.m_ItemByToArray)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(myQ)
        myResult(1) = TypeInfo.VBAId(myQ)
        myResult(2) = TypeInfo.GroupId(myQ)
        myResult(3) = TypeInfo.EntityId(myQ)
        myResult(4) = TypeInfo.HolderId(myQ)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test22_ArrayListIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_ArrayList, vbObject, e_Group.m_Holder, e_Entity.m_Object, e_Holder.m_ItemByIndex0)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(myAL)
        myResult(1) = TypeInfo.VBAId(myAL)
        myResult(2) = TypeInfo.GroupId(myAL)
        myResult(3) = TypeInfo.EntityId(myAL)
        myResult(4) = TypeInfo.HolderId(myAL)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test23_DictionaryIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_Dictionary, vbObject, e_Group.m_Holder, e_Entity.m_Object, e_Holder.m_ItemByKey)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(myD)
        myResult(1) = TypeInfo.VBAId(myD)
        myResult(2) = TypeInfo.GroupId(myD)
        myResult(3) = TypeInfo.EntityId(myD)
        myResult(4) = TypeInfo.HolderId(myD)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test24_cHashDIds()

        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(e_Id.m_cHashD, vbObject, e_Group.m_Holder, e_Entity.m_Object, e_Holder.m_ItemByKey)
        Dim myResult As Variant: ReDim myResult(0 To 4)
    
        'Act:  Again we need to sort The result SeqC to get the matching array

        myResult(0) = TypeInfo.Id(myH)
        myResult(1) = TypeInfo.VBAId(myH)
        myResult(2) = TypeInfo.GroupId(myH)
        myResult(3) = TypeInfo.EntityId(myH)
        myResult(4) = TypeInfo.HolderId(myH)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    ' '@TestMethod("Var")
    ' Private Sub Test25_HolderIsIndexable()

    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, True, False, False, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, False, True, False, True, True, False)
    '     Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
    '     Dim myA() As Long
    '     Dim myB As Variant = Array()
    '     Dim myC As Variant = Array(1, 2, 3, 4, 5)
    '     Dim myArr As Variant: myArr = Array(Nothing, True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), myA, myB, myC, Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
    '     'Act:  Again we need to sort The result SeqC to get the matching array

    '     Dim myItem As Variant
    '     Dim myIndex As Long = 0
    '     For Each myItem In myArr
        	
    '         myResult(myIndex) = TypeInfo.IsIndexable(myItem)
    '         'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
    '         myIndex += 1
            
    '         myResult(myIndex) = TypeInfo.IsNotIndexable(myItem)
    '         'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
    '         myIndex += 1
            
    '     Next
        
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    
    ' '@TestMethod("Var")
    ' Private Sub Test26_HolderAssembly()

    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, False, True, False)
    '     Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
    '     Dim myA As Variant: myA = Array(Nothing, True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
    '     'Act:  Again we need to sort The result SeqC to get the matching array

    '     Dim myItem As Variant
    '     Dim myIndex As Long = 0
    '     For Each myItem In myA
            
    '         myResult(myIndex) = TypeInfo.  '(myItem)
    '         'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
    '         myIndex += 1
            
    '         myResult(myIndex) = TypeInfo.IsNotAssembly(myItem)
    '         'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
    '         myIndex += 1
            
    '     Next
        
    '     ' Fmt.Dbg "{0}{nl}{1}", myExpected, myResult
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    
    ' '@TestMethod("Var")
    ' Private Sub Test27_HolderContainer()

    '     'On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, False)
    '     Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
    '     Dim myA As Variant: myA = Array(Nothing, True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
    '     'Act:  Again we need to sort The result SeqC to get the matching array

    '     Dim myItem As Variant
    '     Dim myIndex As Long = 0
    '     For Each myItem In myA
            
    '         myResult(myIndex) = TypeInfo.IsContainer(myItem)
    '         'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
    '         myIndex += 1
            
    '         myResult(myIndex) = TypeInfo.IsNotContainer(myItem)
    '         'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
    '         myIndex += 1
            
    '     Next
        
    '     Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test28_HolderItemByIndex()

        'On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, False, True, False, True, False, True, False, True, True, False)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        Dim myA As Variant: myA = Array(Nothing, True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
            
            myResult(myIndex) = TypeInfo.IsItemByKey(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotItemByKey(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
            
        Next
        Debug.Print
        '' Fmt.Dbg "{0}{nl}{1}", myExpected, myResult
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    ' '@TestMethod("Var")
    ' Private Sub Test29_HolderMapper()

    '     'On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, False, True, True, False, False, True, False, True, True, False)
    '     Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
    '     Dim myA As Variant: myA = Array(Nothing, True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
    '     'Act:  Again we need to sort The result SeqC to get the matching array

    '     Dim myItem As Variant
    '     Dim myIndex As Long = 0
    '     For Each myItem In myA
            
    '         myResult(myIndex) = TypeInfo.IsItemByIndex(myItem)
    '         'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
    '         myIndex += 1

    '         myResult(myIndex) = TypeInfo.IsNotItemByIndex(myItem)
    '         'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
    '         myIndex += 1
            
    '     Next
        
    '     Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    '@TestMethod("Var")
    Private Sub Test30_GroupIsAdmin()

        'On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(True, False, True, False, True, False, True, False, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
            
            myResult(myIndex) = TypeInfo.IsAdmin(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotAdmin(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
            
        Next
        
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub

    '@TestMethod("Var")
    Private Sub Test31_GroupIsNumber()

    'On Error GoTo TestFail
   
    'Arrange:
    Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, True, False, True, False, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True)
    Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
    Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
    'Act:  Again we need to sort The result SeqC to get the matching array

    Dim myItem As Variant
    Dim myIndex As Long = 0
    For Each myItem In myA
            
        myResult(myIndex) = TypeInfo.IsNumber(myItem)
        'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
        myIndex += 1

        myResult(myIndex) = TypeInfo.IsNotNumber(myItem)
        'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
        myIndex += 1
            
    Next
        
    Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
    
TestExit:
    '@Ignore UnhandledOnErrorResumeNext
    On Error Resume Next
    
    Exit Sub
TestFail:
    Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    Resume TestExit
End Sub

    '@TestMethod("Var")
    Private Sub Test32_GroupIsBoolean()

        'On Error GoTo TestFail
        
        'Arrange:
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, True, False, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
                    
            myResult(myIndex) = TypeInfo.IsBoolean(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotBoolean(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
                    
        Next
                
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
            
        TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
            
        Exit Sub
        TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test33_GroupIsString()

        'On Error GoTo TestFail
        
        'Arrange:
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
                    
            myResult(myIndex) = TypeInfo.IsString(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotString(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
                    
        Next
                
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
            
        TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
            
        Exit Sub
        TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test34_GroupIsItemObject()

        'On Error GoTo TestFail
        
        'Arrange:
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, False, True, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
                    
            myResult(myIndex) = TypeInfo.IsItemObject(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotString(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
                    
        Next
                
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
            
        TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
            
        Exit Sub
        TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test35_GroupIsInitialisedArray()

        'On Error GoTo TestFail
        
        'Arrange:
        '                                 0      1     2      3     4      5     6      7     8      9     10     11    12     13    14     15    16     17    18    19     20    21     22     23    24     25    26     27    28     29    30     31    32     33
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, False, True, False, True, False, True, False, True, False, True, False, True)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        '                               0     2        4      6              8     10  12               14      16             18       20                    22   24   26   28     30   32
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
                    
            myResult(myIndex) = TypeInfo.IsInitialisedArray(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotInitialisedArray(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
                    
        Next
                
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
            
        TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
            
        Exit Sub
        TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test35_GroupIsItemByIndex1()

        'On Error GoTo TestFail
        
        'Arrange:
        '                                  0     1     2      3     4      5     6      7     8      9     10     11    12     13    14     15    16     17    18     19    20     21    22    23     24     25    26     27    28     29    30     31    32     33
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, False, True, False, True, False, True, False, True, False, True)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
                    
            myResult(myIndex) = TypeInfo.IsItemByIndex1(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotItemByIndex1(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
                    
        Next
                
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
            
        TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
            
        Exit Sub
        TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test36_GroupIsItemByIndex0()

        'On Error GoTo TestFail
        
        'Arrange:
        '                                  0     1     2      3     4      5     6      7     8      9     10     11    12     13    14     15    16     17    18     19    20     21    22     23    24     25    26     27    28     29    30     31    32    33
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        '                               0     2        4      6              8     10  12              14       16             18       20                    22   24   26   28     30   32 
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
                    
            myResult(myIndex) = TypeInfo.IsItemByIndex0(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotItemByIndex0(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
                    
        Next
                
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
            
        TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
            
        Exit Sub
        TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test37_GroupIsItemByKey()

        'On Error GoTo TestFail
        
        'Arrange:
        '                                  0     1     2      3     4      5     6      7     8      9     10     11    12     13    14     15    16     17    18     19    20     21    22     23    24    25     26    27     28     29    30     31    32    33
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, True, False, False, True, False, True, False, True)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        '                               0     2        4      6              8     10  12              14       16             18       20                    22   24   26   28     30   32 
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
                    
            myResult(myIndex) = TypeInfo.IsItemByKey(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotItemByKey(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
                    
        Next
                
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
            
        TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
            
        Exit Sub
        TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test38_GroupIsItemByToArray()

        'On Error GoTo TestFail
        
        'Arrange:
        '                                  0     1     2      3     4      5     6      7     8      9     10     11    12     13    14     15    16     17    18     19    20     21    22     23    24     25    26     27    28    29     30    31     32     33
        Dim myExpected As Variant = Array(False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, True, False, True, False, False, True)
        Dim myResult As Variant: ReDim myResult(LBound(myExpected) To UBound(myExpected))
        '                               0     2        4      6              8     10  12              14       16             18       20                    22   24   26   28     30   32 
        Dim myA As Variant: myA = Array(Null, Nothing, Empty, VBA.CVErr(42), True, 42, VBA.CVDate(42), "Hello", PointXY(4, 2), Array(), Array(1, 2, 3, 4, 5), myC, myD, myH, myStk, myQ, myAL)
        'Act:  Again we need to sort The result SeqC to get the matching array

        Dim myItem As Variant
        Dim myIndex As Long = 0
        For Each myItem In myA
                    
            myResult(myIndex) = TypeInfo.IsItemByToArray(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1

            myResult(myIndex) = TypeInfo.IsNotItemByToArray(myItem)
            'Debug.Print myIndex, myExpected(myIndex), myResult(myIndex)
            myIndex += 1
                    
        Next
                
        Assert.Strict.SequenceEquals myExpected, myResult, CurrentProcedureName
            
        TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
            
        Exit Sub
        TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
End Module