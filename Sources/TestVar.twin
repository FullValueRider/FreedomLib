Module TestVar

    Option Explicit
    Option Base 0
    Option Private Module

    Private myNArray() As Variant
    Private myUArray As Variant  'assign array() in test
    Private myPArray(0 To 5) As Variant
    Private my3DArray(1 To 3, 2 To 4, 3 To 5) As Variant
    Private myC As Collection
    Private myUdt As TestUDT
    Private myAL As ArrayList
    Private myQ As Queue
    Private myStk As Stack
    Private myT As Treap
    Private myH As cHashD
    Private myD As Dictionary
    Private myNothingObj As Collection
    Private myArgs As Args
    Private myTnode As TNode
    Public Type TestUDT
        x As Long
        y As Long
    End Type
    
    
    Dim mympObject As PointXY
    '[Description("Allows testing of IsMissing")]    
    Private Function ReturnIsMissing(Optional ByRef ipItem As Variant) As Variant
        Return ipItem
    End Function
    Private Sub InitialiseTestEntities()
        
        myUdt.x = 42
        myUdt.y = 84
        Set myArgs = Args(10, 20, 30, 40, 50)
        Set myTnode = TNode.Deb("Hello", 42, 0.9!)
        
        myUArray = Array()
        
        Set myC = New Collection
        myC.Add 10
        myC.Add 20
        myC.Add 30
        
        Set myD = New Dictionary
        myD.Add "One", 10
        myD.Add "Two", 20
        myD.Add "Three", 30
        
        Set myQ = Queue()
        myQ.Enqueue 10
        myQ.Enqueue 30
        myQ.Enqueue 30
        
        Set myStk = Stack()
        myStk.Push 10
        myStk.Push 20
        myStk.Push 30
        
        Set myT = Treap()
        myT.Add "One", 10
        myT.Add "Two", 20
        myT.Add "Three", 30
        
        Set myAL = New ArrayList
        myAL.Add 10
        myAL.Add 20
        myAL.Add 30
        
        Set myH = New cHashD
        myH.Add "One", 10
        myH.Add "Two", 20
        myH.Add "Three", 30
        
        Set mympObject = PointXY(4, 2)
    End Sub
    
    
      Public Sub VarTests()
        
        Debug.Print CurrentComponentName,
        InitialiseTestEntities
        Test01_IsObjectAndName
       
        
        ' The following test methods that replace VBA IsXXX methods that are not type specific
        Test02a_VarInfo_IsArray_VBAReplacement
        ' Test02b_VarInfo_IsDate_VBAReplacement
        ' Test02c_VarInfo_IsEmpty_VBAReplacement
        ' Test02d_VarInfo_IsError_VBAReplacement
        ' Test02e_VarInfo_IsErrObject_VBAReplacement
        
        Test02f_VarInfo_IsMissing_VBAReplacement
        ' Test02g_VarInfo_IsNothing_VBAReplacement
        ' Test02h_VarInfo_IsNull_VBAReplacement
        Test02i_VarInfo_IsNumeric_VBAReplacement
        Test02j_VarInfo_IsObject_VBAReplacement
        
        ' Tests for Ids and names
        Test_Null_IdsAndNames
        Test_Nothing_IdsAndNames
        Test_Empty_IdsAndNames
        Test_CVErr_IdsAndNames
        Test_ErrObject_IdsAndNames
        
        Test_Boolean_IdsAndNames
        Test_Byte_IdsAndNames
        Test_Integer_IdsAndNames
        Test_Long_IdsAndNames
        Test_LongLong_IdsAndNames
        
        Test_Single_IdsAndNames
        Test_Double_IdsAndNames
        Test_Currency_IdsAndNames
        Test_Decimal_IdsAndNames
        Test_Date_IdsAndNames
        
        Test_String_IdsAndNames
        Test_narray_IdsAndNames
        Test_uarray_IdsAndNames
        Test_parray_IdsAndNames_linearPArray
        Test_parray_IdsAndNames_3dPArray
        
        Test_UserDefinedType_IdsAndNames
        Test_mpObject_IdsAndNames
        Test_ItemByIndex0_ArrayList
        Test_ItemByIndex1_Args ' Args qualifies foritembyIndex1
        Test_ItemByIndex1_Collection
        ' need to add seq when they are installed
        Test_ItemByKey_cHashD
        Test_ItemByKey_Dictionary
        Test_ItemByKey_Treap
        ' Test_TNode_IdsAndNames
        'Test_mpObject_TNode
        Test_ItemByToArray_Queue
        Test_ItemByToArray_Stack
        
        Debug.Print vbTab, vbTab, vbTab, "Testing completed"

        'Test_Count
        
    End Sub


    '@TestMethod("Var")
    Private Sub Test01_IsObjectAndName()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(True, "Var", "Var")
        Dim myResult As Variant
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(42)
        With mycoll
       
            .Add VBA.IsObject(myVar)
            .Add VBA.TypeName(myVar)
            .Add myVar.TypeName
        End With
        myResult = mycoll.Items
        'Assert:
        
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
  
    
    '@TestMethod("Var")
    Private Sub Test02a_VarInfo_IsArray_VBAReplacement()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(True, True, True, False, False, False)
        Dim myResult As Variant: ReDim myResult(0 To 3)
        Dim mycoll As Collection = New Collection
        
        Dim myVar1 As Var = Var(myPArray)
        Dim myVar2 As Var = Var(myNArray)
        Dim myVar3 As Var = Var(myUArray)

        
        'Act:
        With mycoll
            .Add myVar1.IsArray
            .Add myVar2.IsArray
            .Add myVar3.IsArray
            .Add myVar1.IsNotArray
            .Add myVar2.IsNotArray
            .Add myVar3.IsNotArray
        End With
        
        myResult = mycoll.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    ' '@TestMethod("Var")
    ' Private Sub Test02b_VarInfo_IsDate_VBAReplacement()

    '     ' on error goto TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(False, True, False, True, False, True)
    '     Dim myResult As Variant: ReDim myResult(0 To 5)
    '     Dim myCOll As Collection = New Collection
    '     'Act:
    '     With myCOll
    '         .add myVar.IsDate(42)
    '         .add myVar.IsDate(CVDate(42))
    '         .add myVar.IsDate("Hello")
    '         .add myVar.IsNotDate("Hello")
    '         .add myVar.IsNotDate(CVDate(42))
    '         .add myVar.IsNotDate(42)
    '     End With
    '     myResult = myCOll.Items
        
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    
    ' '@TestMethod("Var")
    ' Private Sub Test02c_VarInfo_IsEmpty_VBAReplacement()

    '     ' on error goto TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(True, False, True, False)
    '     Dim myResult As Variant: ReDim myResult(0 To 3)
    '     Dim myColl As Collection = New Collection
    '     'Act:
    '     With myColl
    '         .add myVar.IsEmpty(Empty)
    '         .add myVar.IsEmpty("Hello")
    '         .add myVar.IsNotEmpty("Hello")
    '         .add myVar.IsNotEmpty(Empty)
    '     End With
    '     myResult = myColl.Items
        
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    
    ' '@TestMethod("Var")
    ' Private Sub Test02d_VarInfo_IsError_VBAReplacement()

    '     ' on error goto TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(True, False, True, False)
    '     Dim myResult As Variant: ReDim myResult(0 To 3)
    '     Dim mycoll As Collection = New Collection
    '     'Act:
    '     With mycoll
    '         .add myVar.IsError(VBA.CVErr(42))
    '         .add myVar.IsError("Hello")
    '         .add myVar.IsNotError("Hello")
    '         .add myVar.IsNotError(VBA.CVErr(42))
    '     End With
    '     myResult = mycoll.Items
        
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
   
    ' '@TestMethod("Var")
    ' Private Sub Test02e_VarInfo_IsErrObject_VBAReplacement()

    '     ' on error goto TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(True, False, True, False)
    '     Dim myResult As Variant: ReDim myResult(0 To 3)
    '     Dim mycoll As Collection = New Collection
        
    '     'Act:
    '     With mycoll
    '         .add myVar.IsErrObject(Err)
    '         .add myVar.IsErrObject("Hello")
    '         .add myVar.IsNotErrObject("Hello")
    '         .add myVar.IsNotErrObject(Err)
    '     End With
        
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub

 
    '@TestMethod("Var")
    Private Sub Test02f_VarInfo_IsMissing_VBAReplacement()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(True, False, False, False, True, True)
        Dim myResult As Variant
        Dim myColl As Collection = New Collection
        'Act:
        Dim myVar1 As Var = Var(ReturnIsMissing)
        Dim myVar2 As Var = Var(42)
        Dim myVar3 As Var = Var("Hello")
        
        With myColl
            
            .Add myVar1.IsMissing
            .Add myVar2.IsMissing
            .Add myVar3.IsMissing
            .Add myVar1.IsNotMissing
            .Add myVar2.IsNotMissing
            .Add myVar3.IsNotMissing
            
        End With
        myResult = myColl.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
   
    ' '@TestMethod("Var")
    ' Private Sub Test02g_VarInfo_IsNothing_VBAReplacement()

    '     ' on error goto TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(True, False, False, True, False, True)
    '     Dim myResult As Variant: ReDim myResult(0 To 5)
    '     Dim myColl As Collection = New Collection
    '     'Act:
    '     With myColl
    '         .add myVar.IsNothing(myNothingObj)
    '         .add myVar.IsNothing(myC)
    '         .add myVar.IsNothing("Hello")
    '         .add myVar.IsNotNothing(myC)
    '         .add myVar.IsNotNothing(myNothingObj)
    '         .add myVar.IsNotNothing("Hello")
    '     End With
    '     myResult = myColl.Items
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
   
    ' '@TestMethod("Var")
    ' Private Sub Test02h_VarInfo_IsNull_VBAReplacement()

    '     ' on error goto TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(True, False, False, True, False, True)
    '     Dim myResult As Variant: ReDim myResult(0 To 5)
    '     Dim myColl As Collection = New Collection
    '     'Act:
    '     With myColl
    '         .add myVar.IsNull(Null)
    '         .add myVar.IsNull(myC)
    '         .add myVar.IsNull("Hello")
    '         .add myVar.IsNotNull(myC)
    '         .add myVar.IsNotNull(Null)
    '         .add myVar.IsNotNull("Hello")
    '     End With
    '     myResult = myColl.Items
        
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    '@TestMethod("Var")
    Private Sub Test02i_VarInfo_IsNumeric_VBAReplacement()
        
        On Error GoTo TestFail
    
        'Arrange:
        Dim myExpected As Variant = Array(False, True, False, True, False, True)
        Dim myResult As Variant: ReDim myResult(0 To 5)
        Dim myColl As Collection = New Collection
        Dim myVar1 As Var = Var(42)
        Dim myVar2 As Var = Var("42")
        Dim myVar3 As Var = Var("Hello")
        'Act:
        With myColl
        	
            .Add myVar1.IsNumeric
            .Add myVar2.IsNumeric
            .Add myVar3.IsNumeric
            
            .Add myVar1.IsNotNumeric
            .Add myVar2.IsNotNumeric
            .Add myVar3.IsNotNumeric
         
        End With
        myResult = myColl.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
        
    TestExit:
        On Error Resume Next
       
        
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    ' .add myVar.IsNotObject(myC)
    '@TestMethod("Var")
    Private Sub Test02j_VarInfo_IsObject_VBAReplacement()

        ' on error goto TestFail
    
        'Arrange:
        ' Remember that flib defines 'Nothing' as a 'simple' not an object
        Dim myExpected As Variant = Array(True, False, False, False, False, True, True, True)
        Dim myResult As Variant: ReDim myResult(0 To 7)
        Dim myColl As Collection = New Collection
        
        Dim myVar1 As Var = Var(myC)
        Dim myVar2 As Var = Var("Hello")
        Dim myVar3 As Var = Var(Nothing)
        Dim myVar4 As Var = Var(Err)
        'Act:
        With myColl
            .Add myVar1.IsObject
            .Add myVar2.IsObject
            .Add myVar3.IsObject
            .Add myVar4.IsObject
            .Add myVar1.IsNotObject
            .Add myVar2.IsNotObject
            .Add myVar3.IsNotObject
            .Add myVar4.IsNotObject
        End With
        myResult = myColl.Items
        
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub

    '@TestMethod("Var")
    Private Sub Test_Null_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Null, vbNull, e_Group.m_Admin, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "null", "Null", "admin", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant
        Dim myCOll As Collection = New Collection
        Dim myVar As Var = Var(Null)
       
        'Act: 
        With myCOll
            .Add myVar.IsNull
            .Add myVar.IsNotNull
            
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
            
        End With
        myResult = myCOll.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_Nothing_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Nothing, vbObject, e_Group.m_Admin, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "nothing", "Nothing", "admin", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant
        Dim myVar As Var = Var(Nothing)
        'Act: 
        Dim myCOll As Collection = New Collection
        With myCOll
            .Add myVar.IsNothing
            .Add myVar.IsNotNothing
           
                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        
        myResult = myCOll.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_Empty_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Empty, vbEmpty, e_Group.m_Admin, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "empty", "Empty", "admin", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant
        Dim myCOll As Collection = New Collection
        Dim myVar As Var = Var(Empty)
        'Act: 
        With myCOll
        
            .Add myVar.IsEmpty
            .Add myVar.IsNotEmpty
                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
            
        End With
        myResult = myCOll.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub


    '@TestMethod("Var")
    Private Sub Test_CVErr_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_CVErr, vbError, e_Group.m_Admin, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "cverr", "Error", "admin", "singlevalue", "isnotholder" _
            )
            
        Dim myResult As Variant: ReDim myResult(0 To 9)
        Dim myColl As Collection = New Collection
        Dim myVar As Var = Var(CVErr(42))
        'Act: 
        With myColl
            
            .Add myVar.IsError
            .Add myVar.IsNotError
                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = myColl.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_ErrObject_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_ErrObject, vbDataObject, e_Group.m_Admin, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "errobject", "Error", "admin", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant
        Dim MYcOLL As Collection = New Collection
        Dim myVar As Var = Var(Err)
        'Act: 
        With MYcOLL
            .Add myVar.IsErrObject
            .Add myVar.IsNotErrObject
                    
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = MYcOLL.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub

    
    '@TestMethod("Var")
    Private Sub Test_Boolean_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Boolean, vbBoolean, e_Group.m_Boolean, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "boolean", "Boolean", "boolean", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant: ReDim myResult(0 To 9)
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(True)
        'Act: 
        With mycoll
            .Add myVar.IsBoolean
            .Add myVar.IsNotBoolean

            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub

    '@TestMethod("Var")
    Private Sub Test_Byte_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Byte, vbByte, e_Group.m_Number, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "byte", "Byte", "number", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(VBA.CByte(42))
        'Act: 
        With mycoll
            .Add myVar.IsByte
            .Add myVar.IsNotByte
                            
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_Integer_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Integer, vbInteger, e_Group.m_Number, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "integer", "Integer", "number", "singlevalue", "isnotholder" _
            )
            
        Dim myResult As Variant
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(VBA.CInt(42))
        'Act: 
        With mycoll
            .Add myVar.IsInteger
            .Add myVar.IsNotInteger
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_Long_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Long, vbLong, e_Group.m_Number, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "long", "Long", "number", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(VBA.CLng(42))
        'Act: 
        With mycoll
            .Add myVar.IsLong
            .Add myVar.IsNotLong

            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
       
        End With
        
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_LongLong_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_LongLong, vbLongLong, e_Group.m_Number, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "longlong", "LongLong", "number", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(VBA.CLngLng(42))
        'Act: 
        With mycoll
            .Add myVar.IsLongLong
            .Add myVar.IsNotLonglong

                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
            
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)'Assert:
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_Single_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
                ( _
                    True, False, _
                    1&, 1&, 1&, False, True, _
                    e_Id.m_Single, vbSingle, e_Group.m_Number, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                    "single", "Single", "number", "singlevalue", "isnotholder" _
                )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(VBA.CSng(42))
        'Act: 
        With mycoll
            .Add myVar.IsSingle
            .Add myVar.IsNotSingle
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
    
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
            
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)'Assert:
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_Double_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Double, vbDouble, e_Group.m_Number, e_Entity.m_SingleValue, _
                e_Holder.m_IsNotHolder, "double", "Double", "number", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(VBA.CDbl(42))
        'Act: 
        With mycoll
            .Add myVar.IsDouble
            .Add myVar.isNotDouble
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
            
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)'Assert:
       
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_Currency_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Currency, vbCurrency, e_Group.m_Number, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "currency", "Currency", "number", "singlevalue", "isnotholder" _
            )
        
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(VBA.CCur(42))
        'Act: 
        With mycoll
            .Add myVar.IsCurrency
            .Add myVar.IsNotCurrency
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
            
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)'Assert:
        
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_Decimal_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
                ( _
                    True, False, _
                    1&, 1&, 1&, False, True, _
                    e_Id.m_Decimal, vbDecimal, e_Group.m_Number, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                    "decimal", "Decimal", "number", "singlevalue", "isnotholder" _
                )
                
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(VBA.CDec(42))
        'Act: 
        With mycoll
            .Add myVar.IsDecimal
            .Add myVar.IsNotDecimal
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
    End With
    myResult = mycoll.Items
        
    'Assert:
    ' Debug.Print
    ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
    ' Debug.Print VBA.Join(myResult, Chars.tbComma)'Assert:
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_Date_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_Date, vbDate, e_Group.m_Number, e_Entity.m_SingleValue, e_Holder.m_IsNotHolder, _
                "date", "Date", "number", "singlevalue", "isnotholder" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(CDate(42))
        'Act: 
        With mycoll
            .Add myVar.IsDate
            .Add myVar.IsNotDate
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
       
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        'Assert:
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_String_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                5&, 1&, 5&, True, False, _
                e_Id.m_String, vbString, e_Group.m_Holder, e_Entity.m_GroupValue, e_Holder.m_String, _
                "string", "String", "holder", "groupvalue", "string" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var("Hello")
        'Act: 
        With mycoll
            .Add myVar.IsString
            .Add myVar.IsNotString
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_narray_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                -1&, 0&, -1&, False, True, _
                e_Id.m_NArray, vbArray, e_Group.m_NotAccessible, e_Entity.m_NotAccessible, e_Holder.m_IsNotHolder, _
                "narray", "Array", "notaccessible", "notaccessible", "isnotholder" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myNArray)
        'Act: 
        With mycoll
            .Add myVar.IsNArray
            .Add myVar.IsNotNArray
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_uarray_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                -1&, 0&, -1&, False, True, _
                e_Id.m_UArray, vbArray, e_Group.m_NotAccessible, e_Entity.m_NotAccessible, e_Holder.m_IsNotHolder, _
                "uarray", "Array", "notaccessible", "notaccessible", "isnotholder" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myUArray)
        'Act: 
        With mycoll
            .Add myVar.IsUArray
            .Add myVar.IsNotUArray
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
            
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub

    
    '@TestMethod("Var")
    Private Sub Test_parray_IdsAndNames_linearPArray()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                6&, 0&, 5&, True, False, _
                e_Id.m_PArray, vbArray, e_Group.m_Holder, e_Entity.m_MultiIndex, e_Holder.m_Array, _
                "parray", "Array", "holder", "multiindex", "array" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myPArray)
        'Act: 
        With mycoll
            .Add myVar.IsPArray
            .Add myVar.IsNotPArray
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
            
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_parray_IdsAndNames_3dPArray()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                /* all elements */ 27&, /*no first or last index for all elements */ _
                /* first rank */ 3&, 1&, 3&, _
                /* second rank */ 3&, 2&, 4&, _
                /* third rank */ 3&, 3&, 5&, _
                True, False, _
                e_Id.m_PArray, vbArray, e_Group.m_Holder, e_Entity.m_MultiIndex, e_Holder.m_Array, _
                "parray", "Array", "holder", "multiindex", "array" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        ' my3DArray(1 To 3, 2 To 4, 3 To 5)
        Dim myVar As Var = Var(my3DArray)
        'Act: 
        With mycoll
            .Add myVar.IsPArray
            .Add myVar.IsNotPArray
                                
            .Add myVar.Count
            
            
            .Add myVar.Count(1)
            .Add myVar.FirstIndex(1)
            .Add myVar.LastIndex(1)
            
            .Add myVar.Count(2)
            .Add myVar.FirstIndex(2)
            .Add myVar.LastIndex(2)
            
            .Add myVar.Count(3)
            .Add myVar.FirstIndex(3)
            .Add myVar.LastIndex(3)
            
            
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
            
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_UserDefinedType_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                -1&, 0&, -1&, False, True, _
                e_Id.m_UDT, vbUserDefinedType, e_Group.m_NotAccessible, e_Entity.m_NotAccessible, e_Holder.m_IsNotHolder, _
                "udt", "UDT", "notaccessible", "notaccessible", "isnotholder" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myUdt)
        'Act: 
        With mycoll
            .Add myVar.IsUDT
            .Add myVar.IsNotUDT
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_mpObject_IdsAndNames()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                1&, 1&, 1&, False, True, _
                e_Id.m_mpObject, vbObject, e_Group.m_mpObject, e_Entity.m_MultiValue, e_Holder.m_IsNotHolder, _
                "mpobject", "Object", "mpobject", "multivalue", "isnotholder" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(mympObject)
        'Act: 
        With mycoll
            .Add myVar.IsmpObject
            .Add myVar.IsNotmpObject
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
            
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_ItemByIndex0_ArrayList()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                3&, 0&, 2&, True, False, _
                e_Id.m_ArrayList, vbObject, e_Group.m_Holder, e_Entity.m_SingleIndex, e_Holder.m_ItemByIndex0, _
                "arraylist", "ArrayList", "holder", "singleindex", "itembyindex0" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myvar As Var = Var(myAL)
        
        'Act: 
        With mycoll
            .Add myvar.IsItemByIndex0
            .Add myvar.IsNotItemByIndex0
                                
            .Add myvar.Count
            .Add myvar.FirstIndex
            .Add myvar.LastIndex
            .Add myvar.HoldsItems
            .Add myvar.LacksItems
         
            .Add myvar.Id(e_VarGenre.m_FLib)
            .Add myvar.Id(e_VarGenre.m_VBA)
            .Add myvar.Id(e_VarGenre.m_Group)
            .Add myvar.Id(e_VarGenre.m_Entity)
            .Add myvar.Id(e_VarGenre.m_Holder)
            
            .Add myvar.Name(e_VarGenre.m_FLib)
            .Add myvar.Name(e_VarGenre.m_VBA)
            .Add myvar.Name(e_VarGenre.m_Group)
            .Add myvar.Name(e_VarGenre.m_Entity)
            .Add myvar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_ItemByIndex1_Args()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                5&, 1&, 5&, True, False, _
                e_Id.m_Args, vbObject, e_Group.m_Holder, e_Entity.m_SingleIndex, e_Holder.m_ItemByIndex1, _
                "args", "Args", "holder ", "singleindex", "itembyindex1" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myArgs)
        'Act: 
        With mycoll
            .Add myVar.IsItemByIndex1
            .Add myVar.IsNotItemByIndex1
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
         
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        myResult = mycoll.Items
        
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_ItemByIndex1_Collection()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                3&, 1&, 3&, True, False, _
                e_Id.m_Collection, vbObject, e_Group.m_Holder, e_Entity.m_SingleIndex, e_Holder.m_ItemByIndex1, _
                "collection", "Collection", "holder", "singleindex", "itembyindex1" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myC)
        'Act: 
        With mycoll
            .Add myVar.IsItemByIndex1
            .Add myVar.IsNotItemByIndex1
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        
        myResult = mycoll.Items
    
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
            
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_ItemByKey_cHashD()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
                ( _
                    True, False, _
                    3&, 0&, 2&, True, False, _
                    e_Id.m_cHashD, vbObject, e_Group.m_Holder, e_Entity.m_SingleIndex, e_Holder.m_ItemByKey, _
                    "chashd", "cHashD", "holder", "singleindex", "itembykey" _
                )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myH)
        'Act: 
        With mycoll
            .Add myVar.IsItemByKey
            .Add myVar.IsNotItemByKey
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
    
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        
        myResult = mycoll.Items
    
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_ItemByKey_Dictionary()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
                ( _
                    True, False, _
                    3&, 0&, 2&, True, False, _
                    e_Id.m_Dictionary, vbObject, e_Group.m_Holder, e_Entity.m_SingleIndex, e_Holder.m_ItemByKey, _
                    "dictionary", "Dictionary", "holder", "singleindex", "itembykey" _
                )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myD)
        'Act: 
        With mycoll
            .Add myVar.IsItemByKey
            .Add myVar.IsNotItemByKey
                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        
        myResult = mycoll.Items
    
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)

        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    ' '@TestMethod("Var")
    ' Private Sub Test_mpObject_TNode()

    '     ' on error goto TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = _
    '         Array _
    '             ( _
    '                 True, False, _
    '                 1&, 1&, 1&, False, True, _
    '                 e_Id.m_TNode, vbObject, e_Group.m_mpObject, e_Entity.m_SingleIndex, e_Holder.m_IsNotHolder, _
    '                 "tnode", "TNode", "mpObject", "object", "isnotholder" _
    '             )
    '     Dim myResult As Variant:
    '     Dim mycoll As Collection = New Collection
    '     Dim myVar As Var = Var(myTnode)
    '     'Act: 
    '     With mycoll
    '         .Add myVar.IsmpObject
    '         .Add myVar.IsNotmpObject
                                
    '         .Add myVar.Count
    '         .Add myVar.FirstIndex
    '         .Add myVar.LastIndex
    '         .Add myVar.HoldsItems
    '         .Add myVar.LacksItems
        
    '         .Add myVar.Id(e_VarGenre.m_FLib)
    '         .Add myVar.Id(e_VarGenre.m_VBA)
    '         .Add myVar.Id(e_VarGenre.m_Group)
    '         .Add myVar.Id(e_VarGenre.m_Entity)
    '         .Add myVar.Id(e_VarGenre.m_Holder)
            
    '         .Add myVar.Name(e_VarGenre.m_FLib)
    '         .Add myVar.Name(e_VarGenre.m_VBA)
    '         .Add myVar.Name(e_VarGenre.m_Group)
    '         .Add myVar.Name(e_VarGenre.m_Entity)
    '         .Add myVar.Name(e_VarGenre.m_Holder)
    '     End With
        
    '     myResult = mycoll.Items
    
    '     'Assert:
    '     ' Debug.Print
    '     ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
    '     ' Debug.Print VBA.Join(myResult, Chars.tbComma)

    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_ItemByKey_Treap()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
                ( _
                    True, False, _
                    3&, 0&, 2&, True, False, _
                    e_Id.m_Treap, vbObject, e_Group.m_Holder, e_Entity.m_SingleIndex, e_Holder.m_ItemByKey, _
                    "treap", "Treap", "holder", "singleindex", "itembykey" _
                )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myT)
        'Act: 
        With mycoll
            .Add myVar.IsItemByKey
            .Add myVar.IsNotItemByKey

                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        
        myResult = mycoll.Items
    
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)

        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    '@TestMethod("Var")
    Private Sub Test_ItemByToArray_Queue()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                3&, 0&, 2&, True, False, _
                e_Id.m_Queue, vbObject, e_Group.m_Holder, e_Entity.m_NoIndex, e_Holder.m_ItemByToArray, _
                "queue", "Queue", "holder", "noindex", "itembytoarray" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myvAR As Var = Var(myQ)
        'Act: 
        With mycoll
            .Add myvAR.IsItemByToArray
            .Add myvAR.IsNotItemByToArray
                                
            .Add myvAR.Count
            .Add myvAR.FirstIndex
            .Add myvAR.LastIndex
            .Add myvAR.HoldsItems
            .Add myvAR.LacksItems
        
            .Add myvAR.Id(e_VarGenre.m_FLib)
            .Add myvAR.Id(e_VarGenre.m_VBA)
            .Add myvAR.Id(e_VarGenre.m_Group)
            .Add myvAR.Id(e_VarGenre.m_Entity)
            .Add myvAR.Id(e_VarGenre.m_Holder)
            
            .Add myvAR.Name(e_VarGenre.m_FLib)
            .Add myvAR.Name(e_VarGenre.m_VBA)
            .Add myvAR.Name(e_VarGenre.m_Group)
            .Add myvAR.Name(e_VarGenre.m_Entity)
            .Add myvAR.Name(e_VarGenre.m_Holder)
        End With
        
        myResult = mycoll.Items
    
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
        
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub
    
    
    '@TestMethod("Var")
    Private Sub Test_ItemByToArray_Stack()

        ' on error goto TestFail
    
        'Arrange:
        Dim myExpected As Variant = _
            Array _
            ( _
                True, False, _
                3&, 0&, 2&, True, False, _
                e_Id.m_Stack, vbObject, e_Group.m_Holder, e_Entity.m_NoIndex, e_Holder.m_ItemByToArray, _
                "stack", "Stack", "holder", "noindex", "itembytoarray" _
            )
        Dim myResult As Variant:
        Dim mycoll As Collection = New Collection
        Dim myVar As Var = Var(myStk)
        'Act: 
        With mycoll
            .Add myVar.IsItemByToArray

            .Add myVar.IsNotItemByToArray

                                
            .Add myVar.Count
            .Add myVar.FirstIndex
            .Add myVar.LastIndex
            .Add myVar.HoldsItems
            .Add myVar.LacksItems
        
            .Add myVar.Id(e_VarGenre.m_FLib)
            .Add myVar.Id(e_VarGenre.m_VBA)
            .Add myVar.Id(e_VarGenre.m_Group)
            .Add myVar.Id(e_VarGenre.m_Entity)
            .Add myVar.Id(e_VarGenre.m_Holder)
            
            .Add myVar.Name(e_VarGenre.m_FLib)
            .Add myVar.Name(e_VarGenre.m_VBA)
            .Add myVar.Name(e_VarGenre.m_Group)
            .Add myVar.Name(e_VarGenre.m_Entity)
            .Add myVar.Name(e_VarGenre.m_Holder)
        End With
        
        myResult = mycoll.Items
    
        'Assert:
        ' Debug.Print
        ' Debug.Print VBA.Join(myExpected, Chars.tbComma)
        ' Debug.Print VBA.Join(myResult, Chars.tbComma)
    
        Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    TestExit:
        '@Ignore UnhandledOnErrorResumeNext
        On Error Resume Next
    
        Exit Sub
    TestFail:
        Assert.Exact.Fail CurrentComponentName & Chars.tbPeriod & CurrentProcedureName & " raised an error: #" & Err.Number & " - " & Err.Description
        Resume TestExit
    End Sub


End Module