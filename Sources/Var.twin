[Description("Class Var is a replacement for the Variant class.  It provides the metadata of VarInfo via properties of an encapsulated variable (the cargo)")]
Class Var
    /* 
        Class Var provides VarInfo metadata about the encapsulated variable using fluent notation
        e.g. myVar.FirstIndex rather than VarInfo.FirstIndex(myVar)
        
        The class does not provide any mechanism for changing the value(s) of the encapsulated variable
        
        To do this the encapsulated variable should be referenced by the 'Cargo' method
        
        In the case that Cargo encapsulated an Arrray, cargo returns A Matrix instance
        
        Changing the values held by the item encapsulated by Cargo will mutate the original item (even Arrays)
        
    */
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Option Explicit
    Option Base 0
    
    Private Type Properties
        ' for debugging perposes
        Message                                 As String
         
        ' the holder of the reference to the external variable
        Cargo                                   As Variant
        ' ' used to preseve original value of cargo if the input is an array
        ' ' used by class terminate event to release copy of array pointer.
        ' Cargobackup                             As Variant
        
        ' Number of dimensions of the variable. Non holders are 0, holders are 1 and multidimensional arrays = number of dimensions.
        Ranks                                   As Long
        IsMissing                               As Boolean
        IsNumeric                               As Boolean
        ' Capture VBA IsArray value
        IsArray                                 As Boolean
        ' Capture tb ISArrayInitialised value   
        IsArrayInitialized                      As Boolean
        IsObject                                As Boolean
        
        ' the id array from TpeInfo.NameToIds
        ' the name array from VarInfos.FidToNames
        Ids                                     As Variant
        Names                                   As Variant
       
        
        FlibName                                As String
        FlibId                                  As Long
        FirstIndexes                            As Variant  ' 1 based array 
        LastIndexes                             As Variant  ' 1 based array
        Counts                                  As Variant  ' 0 based array.  number of items in valiable.  0 is used for total count for arrays
        
    End Type
 
    Private p                                   As Properties
    
    Const MY_TYPENAME                           As String = "Var"
    Const MY_LOC                                As String = "FreedomLib.Fbase.Var."
    ' Private Sub class_initialize()
    ' End Sub
    
    
    [DefaultMember]
    Public Function Deb(ByRef ipItem As Variant) As Var
        With New Var
            Return .ConstructInstance(ipItem)
        End With
    End Function

    Friend Function ConstructInstance(ByRef ipItem As Variant) As Var
        /* 
            P.Count has a lower bound of 0 because this is where we store the total number of elements of an array
            First and last index arrays have a lower bound of 1 to match the ranks used in L/UBound statements
        */
        ReDim p.Counts(0 To 1)
        ReDim p.FirstIndexes(1 To 1)
        ReDim p.LastIndexes(1 To 1)
        
        
        /* 
            the definition of object is 'different' in FreeedomLib
            so we just call into varinfo as we don't need to repeat the code.
        */
        
        p.IsObject = VarInfo.IsObject(ipItem)
        /*
            IsMissing is a property of the Variant Type
            an IsMissing Variant can be forwrded as a paramter like any other variant
            so the ISMissing property can apparently originate for a set of parameters
            which are not Optional.  Hence the test below
        */
        If VBA.IsMissing(ipItem) Then
        /* 
            Need to asddress the issue that a UArray returns true for IsMissing
        */
            If Not VBA.IsArray(ipItem) Then
                InitialiseForNotAccessibleType
                Return Me
            End If
        End If
        
        If Not VarInfo.TryGetIds(ipItem, p.Ids) Then
            InitialiseForNotAccessibleType
            Return Me
        End If
        p.FlibId = p.Ids(e_VarGenre.m_FLib)
        
        ' Trygetids was successful so no need to test for names.
        VarInfo.TryGetNames p.FlibId, p.Names
        p.FlibName = p.Names(e_VarGenre.m_FLib)
        
        /*
            Assign ipItem to p.cargo **BUT**
             There are two cases we need to avoid 
             1. A UDT  - Currently (as of March 2024) a UDT cannot be passed by Variant if only declared in VBA/tb
             2. A PArray - We want to wrap the Parray in a Matrix to avoid copying the array
        */
        
        ' Unlike VBA, tb allows a valid vartype value to be returned for a UDT
        If VBA.VarType(ipItem) = vbUserDefinedType Then
            InitialiseForNotAccessibleType
            Return Me
        End If
        
       
        
        
        p.IsArray = VBA.IsArray(ipItem)
        
        /* 
            tb IsArrayInitialized  returns True for both UArrays and PArays
            In Freedomlib we want False for UArrays and True for PArrays
        */
        p.IsArrayInitialized = False
        Select Case True
            
            Case p.IsArray
                
                If VBA.IsArrayInitialized(ipItem) Then
                    If (UBound(ipItem) >= LBound(ipItem)) Then
                        ' Found a PArray
                        p.IsArrayInitialized = True
                    End If
                End If
        
                If p.IsArrayInitialized Then
                /*
                    PArray is dealt with as a MatrixInstance
                    whilst we retain typeinfomation relating to a PArray.
                */
                    Set p.Cargo = Matrix().Bind(ipItem)
                Else
                    p.Cargo = ipItem
                End If
                
            Case VBA.IsObject(ipItem)
                Set p.Cargo = ipItem
                
            Case Else
                p.Cargo = ipItem

        End Select
        
        
        
       
       
        /*
            Any multiindex entities now need to be set to indicate an initialised array
            as these types are objects with array like indexing
        */
        If p.Ids(e_VarGenre.m_Entity) = e_Entity.m_MultiIndex Then
            p.IsArray = True
            p.IsArrayInitialized = True
        End If
        
        If p.Ids(e_VarGenre.m_FLib) = e_Id.m_String Then
            p.IsNumeric = VBA.IsNumeric(p.Cargo)
        End If
        
         
       /*
            The following initialisation routines are used to setup the first/lastindex properties
       */
        Select Case p.Ids(e_VarGenre.m_Entity)
            
            Case e_Entity.m_NotAccessible:                      InitialiseForNotAccessibleType
            Case e_Entity.m_SingleValue, e_Entity.m_MultiValue: InitialiseForSingleValue
            Case e_Entity.m_MultiIndex:                         InitialiseforMultiIndex
            Case e_Entity.m_GroupValue:                         InitialiseForGroupValue
            Case Else:                                          InitialiseForSingleIndex
            
       End Select
        
        Return Me
        
    End Function

    
    Private Sub InitialiseForNotAccessibleType()
        /*
            A not accessible type is a variable 
            - that cannot store a value (NArray, UArray)
            - whose values are not accessible (UDT passed as variant)
            - A type which has not been assigned by FreedomLib
        */
        p.Ranks = -1
        p.Counts(0) = -1
        p.Counts(1) = -1
        p.FirstIndexes(1) = 0
        p.LastIndexes(1) = -1
       
        p.IsMissing = True  ' Is missing is enforced to indicate that there is no accessible data
        
    End Sub
    
    Public Sub InitialiseForSingleValue()

        p.Ranks = 0
        p.Counts(0) = 1
        p.Counts(1) = 1
        p.FirstIndexes(1) = 1
        p.LastIndexes(1) = 1
        p.IsMissing = False
        
    End Sub
    
    Private Sub InitialiseForGroupValue()
        
        p.Counts(0) = VBA.Len(p.Cargo)
        p.Counts(1) = p.Counts(0)
        p.Ranks = 1
        p.FirstIndexes(1) = 1
        p.LastIndexes(1) = p.Counts(0)
        p.IsMissing = False
        
    End Sub
    
    Private Sub InitialiseForSingleIndex()
        
        p.Counts(0) = p.Cargo.count
        p.Counts(1) = p.Counts(0)
        
        Select Case p.Ids(e_VarGenre.m_Holder)
            Case e_Holder.m_ItemByIndex0, e_Holder.m_ItemByToArray, e_Holder.m_ItemByKey, e_Holder.m_MapperByIndex, e_Holder.m_MapperByKey
                p.FirstIndexes(1) = 0
                p.LastIndexes(1) = p.Counts(0) - 1
                
            Case e_Holder.m_ItemByIndex1
                p.FirstIndexes(1) = 1
                p.LastIndexes(1) = p.Counts(0)
        End Select
        
        p.Ranks = 1
        p.IsMissing = False
      
    End Sub
    
      
    Private Sub InitialiseforMultiIndex()
        /*
            pArrays As encapsulated in a Matrix instance
        */
        p.Ranks = p.Cargo.ranks
        p.FirstIndexes = p.Cargo.bounds(0)
        p.LastIndexes = p.Cargo.bounds(1)
        p.Counts = p.Cargo.bounds(2)
        p.IsMissing = False
        
    End Sub
    
   

    Public Property Get Cargo() As Variant
    	Return p.Cargo
    End Property
    

    Public Sub class_Terminate()
    	If Not Me Is Var Then
            ' release the array pointed to by p.cargo.
            'Unsafe.SafeArrayUnlock ByVal ArrayPtr(p.Cargo)
            ' Restore the original content of p.cargo so that the garbage collector
            ' doesn't try to do a double deletion of the safe array.
           ' [_HiddenModule].vbaCopyBytes Unsafe.myVarSize, ByVal VarPtr(p.Cargo), ByVal VarPtr(p.Cargobackup)
        End If
       
    End Sub
    
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
' FreedomLib Type Names and Ids
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
    [Description("Returns a lower cased name if defined by FreedomLib else vbnullstring)")]
    Public Function Name(Optional ByRef ipGenre As e_VarGenre = e_VarGenre.m_Flib) As String
    	Contract.IsInNumRange ipGenre, e_VarGenre.m_First, e_VarGenre.m_Last, MY_LOC & CurrentProcedureName
        Return p.Names(ipGenre)
    End Function


    [Description("Returns a positive long value if defined by FreedomLib else -1)")]
    Public Function Id(Optional ByRef ipGenre As e_VarGenre = e_VarGenre.m_Flib) As Long
        Contract.IsInNumRange ipGenre, e_VarGenre.m_First, e_VarGenre.m_Last, MY_LOC & CurrentProcedureName
        Return p.Ids(ipGenre)
    End Function

'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
' Alternatives for VBA.IsXXX methods( which are not type specific) together with their complement
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
    'Description ("Method IsArrayInitialized is in TwinBasic but only determines if a safearray struct exists and hence does not distinguish between Unpopulated and Populated arrays. FreedomLib recommends one of the following specific methods IsNArray, IsUArray and IsParray)")
    Public Function IsArrayInitialized() As Boolean
            Return p.IsArrayInitialized
    End Function

    Public Function IsArrayNotInitialized() As Boolean
            Return (Not p.IsArrayInitialized)
    End Function


    Public Function IsMissing() As Boolean
        Return (p.IsMissing)
    End Function

    Public Function IsNotMissing() As Boolean
        Return (Not p.IsMissing)
    End Function

    
    ' Description("Returns True if ipItem is a string that can be interpreted as a number.  Use IsNumber for non string tests")
    Public Function IsNumeric() As Boolean
        Return p.IsNumeric
    End Function

    Public Function IsNotNumeric() As Boolean
        Return (Not p.IsNumeric)
    End Function
    
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
'Methods that replicate VBA.Vartype vartype
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========

    Public Function IsEmpty() As Boolean
        Return (p.FlibId = e_Id.m_Empty)
    End Function
            
    Public Function IsNotEmpty() As Boolean
        Return (Not Me.IsEmpty)
    End Function

    Public Function IsDate() As Boolean
        Return (p.FlibId = e_Id.m_Date)
    End Function
        
    Public Function IsNotDate() As Boolean
        Return (Not Me.IsDate)
    End Function

    Public Function IsNull() As Boolean
        Return (p.FlibId = e_Id.m_Null)
    End Function
        
    Public Function IsNotNull() As Boolean
        Return (Not Me.IsNull)
    End Function

    [Description("True if ipItem is 'nothing'. Returns false if ipItem is not an object.  Avoids the unusual 'x is nothing' syntax")]
    Public Function IsNothing() As Boolean
        Return (p.FlibId = e_Id.m_Nothing)
    End Function

    Public Function IsNotNothing() As Boolean
        Return (Not Me.IsNothing)
    End Function


    [Description("Tests for not being an error created using CVErr")]
    Public Function IsError() As Boolean
        Return (p.FlibId = e_Id.m_CVErr)
    End Function
        
    Public Function IsNotError() As Boolean
        IsNotError = (Not Me.IsError)
    End Function

    [Description("Tests for the Err object See IsError and IsNotError for errors generated using CVErr")]
    Public Function IsErrObject() As Boolean
        Return (p.FlibId = e_Id.m_ErrObject)
    End Function
        
    Public Function IsNotErrObject() As Boolean
        Return (Not Me.IsErrObject)
    End Function
        
    Public Function IsObject() As Boolean
        Return p.IsObject
    End Function
        
    Public Function IsNotObject() As Boolean
        Return (Not Me.IsObject)
    End Function

    Public Function IsByte() As Boolean
        Return (p.FlibId = e_Id.m_Byte)
    End Function

    Public Function IsNotByte() As Boolean
        Return (Not Me.IsByte)
    End Function


    Public Function IsInteger() As Boolean
        Return (p.FlibId = e_Id.m_Integer)
    End Function

    Public Function IsNotInteger() As Boolean
        Return (Not Me.IsInteger)
    End Function


    Public Function IsLong() As Boolean
        Return (p.FlibId = e_Id.m_Long)
    End Function

    Public Function IsNotLong() As Boolean
        Return (Not Me.IsLong)
    End Function

    Public Function IsLongLong() As Boolean
        Return (p.FlibId = e_Id.m_LongLong)
    End Function

    Public Function IsNotLonglong() As Boolean
        Return (Not Me.IsLongLong)
    End Function

    Public Function IsSingle() As Boolean
        Return (p.FlibId = e_Id.m_Single)
    End Function

    Public Function IsNotSingle() As Boolean
        Return (Not Me.IsSingle)
    End Function


    Public Function IsDouble() As Boolean
        Return (p.FlibId = e_Id.m_Double)
    End Function

    Public Function isNotDouble() As Boolean
        Return (Not Me.IsDouble)
    End Function


    Public Function IsCurrency() As Boolean
        Return (p.FlibId = e_Id.m_Currency)
    End Function

    Public Function IsNotCurrency() As Boolean
        Return (Not Me.IsCurrency)
    End Function


    Public Function IsDecimal() As Boolean
        Return (p.FlibId = e_Id.m_Decimal)
    End Function

    Public Function IsNotDecimal() As Boolean
        Return (Not Me.IsDecimal)
    End Function
    
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
' Entity functions
    ' m_NotDefined
    ' m_SingleValue = &H300                           ' holds a single value* that can be assigned without set
    ' m_First = e_Entity.m_SingleValue
    ' m_UserDefinedType                          ' a grouping of variables which are accessible using unique names qualified by the parent name 
    ' m_Array
    ' m_Last
    ' m_Object = m_Last  
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========

    Public Function IsSimple() As Boolean
        Return p.Ids(e_VarGenre.m_Entity) = e_Entity.m_SingleValue
    End Function

    Public Function IsNotSimple() As Boolean
        Return (Not Me.IsSimple)
    End Function


    Public Function IsUDT() As Boolean
        Return p.Ids(e_VarGenre.m_FLib) = e_Id.m_UDT
    End Function

    Public Function IsNotUDT() As Boolean
        Return (Not Me.IsUDT)
    End Function

    'IsArray see group methods
    'isObject see vbvartype methods
    
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
' Group functions
    ' m_NotAssigned = -1
    ' m_NotInit
    ' m_Admin = &H500' null, nothing, errobject, error(CVErr) and empty are grouped on the basis that thier most common use is in the control of program flow.
    ' m_First = e_group.m_Admin
    ' m_Boolean
    ' m_Number
    ' m_UDT
    ' m_mpObject  ' multiple value object
    ' m_Last
    ' m_Holder = e_group.m_Last
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
    Public Function IsAdmin() As Boolean
        Return p.Ids(e_VarGenre.m_Group) = e_Group.m_Admin
    End Function

    Public Function IsNotAdmin() As Boolean
        Return (Not Me.IsAdmin)
    End Function


    '@Description("True if ipItem is a Boolean.  Exludes objects with a default member returning a Boolean")
    Public Function IsBoolean() As Boolean
        Return p.Ids(e_VarGenre.m_Group) = e_Group.m_Boolean
    End Function


    Public Function IsNotBoolean() As Boolean
        IsNotBoolean = (Not Me.IsBoolean)
    End Function


    '@Dewscription("True if ipItem is a Number.  Excludes objects with a default member returning a Number")
    Public Function IsNumber() As Boolean
        Return p.Ids(e_VarGenre.m_Group) = e_Group.m_Number
    End Function

    Public Function IsNotNumber() As Boolean
        Return (Not Me.IsNumber)
    End Function

    'IsUdt see entity functions
    
    Public Function IsmpObject() As Boolean
        Return p.Ids(e_VarGenre.m_Group) = e_Group.m_mpObject
    End Function
    
    Public Function IsNotmpObject() As Boolean
        Return (Not Me.IsmpObject)
    End Function
    
    Public Function IsHolder() As Boolean
        Return p.Ids(e_VarGenre.m_Group) = e_Group.m_Holder
    End Function
    
    Public Function IsNotHolder() As Boolean
        Return (Not IsHolder)
    End Function


'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
' Holder methods
    ' m_NotAssigned = -1
    ' m_IsNotHolder = &H400                           ' the variable does not hold multiple values
    ' m_First = e_Holder.m_IsNotHolder
    ' m_String                                        ' Has multiple values that can be retrieved by an key or single method that takes an key
    ' m_Array                                         ' variable which contain multiple distinct values  - array, containers,
    ' m_ItemByIndex0
    ' m_ItemByIndex1
    ' m_ItemByKey
    ' m_ItemByToArray                                        ' Objects which contain multiple values  ' avoids the use of ItemsObject which is too close to itemObject                               ' Objects which contain multiple values which require values to be extracted as an array( or some other indexable entity) to allow indexing  = e.g.  Stack, Queue
    ' m_last = 1 << 6
    ' m_Mapper = m_Last      
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========

    '@Description("True if ipItem is a String. Excludes objects with a default member returning a String")
    Public Function IsString() As Boolean
        Return (p.Ids(e_VarGenre.m_Holder) = e_Holder.m_String)
    End Function

    '@Description("False if ipItem is a String. Excludes objects with a default member returning a String")
    Public Function IsNotString() As Boolean
        IsNotString = (Not Me.IsString)
    End Function

    [Description("Returns the value of VBA.IsArray")]
    Public Function IsArray(Optional ByVal ipArrayStatus As e_ArrayStatus = e_ArrayStatus.m_Any) As Boolean
        
        If Not p.IsArray Then
            Return False
        End If
        
        Select Case ipArrayStatus
            Case e_ArrayStatus.m_Any
                Return True
            Case e_ArrayStatus.m_Null
                Return ipArrayStatus = e_ArrayStatus.m_Null
            Case e_ArrayStatus.m_Unpopulated
                Return ipArrayStatus = e_ArrayStatus.m_Unpopulated
            Case e_ArrayStatus.m_Populated
                Return ipArrayStatus = e_ArrayStatus.m_Populated
        End Select
    End Function
    
    Public Function IsNotArray() As Boolean
        Return (Not Me.IsArray)
    End Function


    Public Function IsItemByIndex1() As Boolean
        Return (p.Ids(e_VarGenre.m_Holder) = e_Holder.m_ItemByIndex1)
    End Function

    Public Function IsNotItemByIndex1() As Boolean
        Return (Not Me.IsItemByIndex1)
    End Function


    Public Function IsItemByIndex0() As Boolean
        Return (p.Ids(e_VarGenre.m_Holder) = e_Holder.m_ItemByIndex0)
    End Function

    Public Function IsNotItemByIndex0() As Boolean
        Return (Not Me.IsItemByIndex0)
    End Function


    Public Function IsItemByKey() As Boolean
        Return (p.Ids(e_VarGenre.m_Holder) = e_Holder.m_ItemByKey)
    End Function

    Public Function IsNotItemByKey() As Boolean
        Return (Not Me.IsItemByKey)
    End Function


    Public Function IsItemByToArray() As Boolean
        Return (p.Ids(e_VarGenre.m_Holder) = e_Holder.m_ItemByToArray)
    End Function

    Public Function IsNotItemByToArray() As Boolean
        Return (Not Me.IsItemByToArray)
    End Function


    Public Function IsMapper(Optional ByVal ipMapperType As e_MapperTYpe = e_mapperType.m_Any) As Boolean
        
        Select Case ipMapperType
            
            Case e_MapperTYpe.m_Any
                
                Select Case p.Ids(e_VarGenre.m_Holder)
                    Case e_Holder.m_MapperByKey, e_Holder.m_MapperByIndex
                        Return True
                    Case Else
                        Return False
                End Select
                
            Case e_MapperTYpe.m_ByIndex
                If p.Ids(e_VarGenre.m_Holder) = e_Holder.m_MapperByIndex Then
                    Return True
                Else
                    Return False
                End If
                
            Case e_MapperTYpe.m_ByKey
                If p.Ids(e_VarGenre.m_Holder) = e_Holder.m_MapperByKey Then
                   Return True
               Else
                   Return False
               End If
               
            Case Else
                Return False
                
        End Select
        Return (p.Ids(e_VarGenre.m_Holder) = e_Holder.m_MapperByIndex) Or (p.Ids(e_VarGenre.m_Holder) = e_Holder.m_MapperByKey)
    End Function

    Public Function IsNotMapper() As Boolean
        Return (Not Me.IsMapper)
    End Function
    
    
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
'flib
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========

    Public Function Bounds() As Variant
        Return Array(p.FirstIndexes, p.LastIndexes, p.Counts)
    End Function
    
    [Description("Returns true if the variable is an array with no dimensions e.g. Dim myArray() as long")]
    Public Function IsNArray() As Boolean
        Return p.FlibId = e_Id.m_NArray
    End Function
    
    Public Function IsNotNArray() As Boolean
        Return (Not Me.IsNArray)
    End Function
    
    [Description("Returns true if the variable is an array with an initialised safearray structre but no dimensions e.g. Array()")]
    Public Function IsUArray() As Boolean
        Return p.FlibId = e_Id.m_UArray
    End Function
    
    Public Function IsNotUArray() As Boolean
        Return (Not Me.IsUArray)
    End Function
    
    [Description("Returns true if Variable is an array with defined dimensions  e.g. Dim myArray(x to y) or redim myArray(x to y)")]
    Public Function IsPArray() As Boolean
        Return p.Ids(e_VarGenre.m_FLib) = e_Id.m_PArray
    End Function
    
    Public Function IsNotPArray() As Boolean
        Return (Not Me.IsPArray)
    End Function
    
    
    Public Function IsMatrix() As Boolean
        Return p.Ids(e_VarGenre.m_FLib) = e_Id.m_Matrix
    End Function
    
    Public Function IsNotMatrix() As Boolean
        Return Not Me.IsMatrix
    End Function
' review implied property methods to ensure consistent performance across all types
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
'Implied property methods
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
'The first an last index value ensure that at least one pass of a for loop
' is executed **if** the value can be evaluated
' Simple variables                      values of 1,1
' Udt get                               values of 0,-1
' narrays and uarrays                   values of 0,-1
' holders get values which represent startindexes and count.
    [Description("Returns the first index of the specified rank.  ipRanks Defaults to 1 for holder types")]
    Public Function FirstIndex(Optional ipRank As Long = 1) As Long
        If p.Ranks < 0 Then Return 0
        If ipRank = 0 Then Return 1&
        If ipRank < 1 Then Return 0
        
        Return p.FirstIndexes(ipRank)
    End Function

    [Description("Returns the last index of the specified rank. Returns -1 for non-holder. Defaults to rank 1 for holders)")]
    Public Function LastIndex(Optional ipRank As Long = 1) As Long
        If p.Ranks < 0 Then Return -1
        If ipRank = 0 Then Return 1&
        If ipRank < 1 Then Return -1&
        
        Return p.LastIndexes(ipRank)
    End Function

    [Description("Returns True if variable is a holder type and contins 1 or more values")]
    Public Function HoldsItems() As Boolean
        Return (p.Ranks > 0 And p.Counts(0) > 0)
    End Function

    Public Function LacksItems() As Boolean
        Return Not Me.HoldsItems
    End Function

   
    [Description("returns the number of values per access method represented by the variable. Non holders are 1, empty holders and unallocated arrays return -1,")]
    Public Function Count(Optional ipRank As Long = 0) As Long
        If ipRank < 0 Then Return -1&
        If ipRank = 0 Then Return p.Counts(0)
        Contract.IsInNumRange ipRank, 1, p.Ranks, MY_LOC & CurrentProcedureName
        If ipRank > p.Ranks Then Return -1&
        Return p.Counts(ipRank)
    End Function

    '[ Description ("Returns true if the variable is a single dimension array populated with a single item which is a single dimension array (i.e. a forwarded paramarray))]
    Public Function IsLikeParamArray(ByRef ipItem As Variant) As Boolean
    
        If Not VBA.IsArray(ipItem) Then
            Return False
        End If
    
        If Not VBA.IsArrayInitialized(ipItem) Then
            Return False
        End If
    
        If UBound(ipItem, 1) <> LBound(ipItem(1)) Then
            Return False
        End If
    
        If Not VBA.IsArray(ipItem(0)) Then
            Return False
        End If
    
        If LBound(ipItem(0)) <> UBound(ipItem(0)) Then
            Return False
        End If
    
        Return True
    
    End Function


    [Description(" returns the number of ranks represented by a variable, non holders return 0, arrays return the number of dimensuons otherwise 1")]
    Public Function Ranks() As Long
        Return p.Ranks
    End Function

    ' Description ("Returns true if the specified variable has access to the ranks")
    Public Function HoldsRank(ByVal ipRank As Long) As Boolean
        If ipRank < 1 Then Return False
        Return p.Ranks <= ipRank
    End Function

    Public Function LacksRanks(ByVal ipRank As Long, ByRef ipArray As Variant) As Boolean
        Return Not HoldsRank(ipRank)
    End Function



    [Description("Returns the name 'VarInfo'")]
    Public Property Get TypeName() As String
        Return MY_TYPENAME
    End Property

    Private Sub TypeNotAssigned(ByRef ipItem As Variant, ByRef ipLoc As String)
        Err.Raise 17 + vbObjectError, _
            "Freedomlib.FBase.VarInfo." & ipLoc, _
            "Type " & VBA.TypeName(ipItem) & " not known to FreedomLib"
    End Sub
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
'Convenience methods
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========
    
    Public Property Get IsCollection() As Boolean
        Return p.Ids(e_VarGenre.m_FLib) = e_Id.m_Collection
    End Property
End Class