Module TestIter

    Option Explicit
    option base 0
    Option Private Module

    
    Public Sub IterTests()
    
        Debug.Print CurrentComponentName,

        ' Test01a_IsObjectAndName
    
        ' Test02a_GetCurrentItemFromCollection
        
        
        ' Test02b_GetItem0SeqAfterThreeMovenext
        ' Test02c_GetItem0SeqAfterThreeMoveNextTwoMovePrev
    
        ' Test03a_GetItemSeqAtOffset3
        ' Test03b_GetItemSeqAtOffsetMinus3
        ' Test03c_GetItemSeqIndexGreaterThanSize
        ' Test03d_GetItemSeqIndexDeforeIndex1
    
        ' Test04a_GetKeySeq
        ' Test04b_GetIndexSeq
    
        ' Test05a_GetItemArray
        ' Test05b_GetKeyArray
        ' Test05c_GetIndexArray
    
        ' Test06a_GetItemCollection
        ' Test06b_GetKeyCollection
        ' Test06c_GetIndexCollection
    
        ' Test07a_GetItemArrayList
        ' Test07b_GetKeyArrayList
        ' Test07c_GetIndexArrayList
    
        ' Test08a_GetItemDictionary
        ' Test08b_GetKeyDictionary
        ' Test08c_GetIndexDIctionary
    
        ' Test09a_GetIndexDictionary
    
        Debug.Print vbTab, "Testing completed"

    End Sub


    '@TestMethod("Iter")
    ' Private Sub Test01a_IsObjectAndName()

    '     'On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(True, "Iter", "Iter")
    
    '     Dim myResult As Variant
    '     ReDim myResult(0 To 2)
    
    '     Dim myI As Iter = Iter(Array(1, 2, 3, 4, 5))
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     myResult(0) = VBA.IsObject(myI)
    '     myResult(1) = VBA.TypeName(myI)
    '     myResult(2) = myI.TypeName
   
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test02a_GetCurrentItemFromCollection()

    '     'On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant = Array(10, 20, 30, 40, 50, Null, 50, 40, 30, 20, 10, Null)
    
    '     Dim myResult As Collection = New Collection
    
    '     'Act:  
    '     Dim myC As Collection = New Collection
    '     myC.Add 10
    '     myC.Add 20
    '     myC.Add 30
    '     myC.Add 40
    '     myC.Add 50
    '     Dim myI As Iter = Iter(myC)
       
    '     Dim myIndex As Long
    '     For myIndex = 1 To 6
    '         myResult.Add myI.CurItem(0)
    '         myI.MoveNext
    '     Next
    '     For myIndex = 1 To 6
    '     	myResult.Add myI.CurItem(0)
    '         myI.MoveNext
    '     Next
        
   
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult.Items, CurrentProcedureName

    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test02b_GetItem0SeqAfterThreeMovenext()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = Array(True, True, True, 40)
    
    '     Dim myResult As Variant
    '     ReDim myResult(0 To 3)
    '     Dim myC As Collection
    '     Set myC = New Collection
    '     myC.Add 10
    '     myC.Add 20
    '     myC.Add 30
    '     myC.Add 40
    '     myC.Add 50
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myI As Iter
    '     Set myI = Iter(myC)
    '     myResult(0) = myI.MoveNext
    '     myResult(1) = myI.MoveNext
    '     myResult(2) = myI.MoveNext
    '     myResult(3) = myI.CurItem(0)
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test02c_GetItem0SeqAfterThreeMoveNextTwoMovePrev()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = Array(True, True, True, True, True, 20)
    
    '     Dim myResult As Variant
    '     ReDim myResult(0 To 5)
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myI As Iter
    '     Set myI = Iter(SeqC(10, 20, 30, 40, 50))
    '     myResult(0) = myI.MoveNext
    '     myResult(1) = myI.MoveNext
    '     myResult(2) = myI.MoveNext
    '     myResult(3) = myI.MovePrev
    '     myResult(4) = myI.MovePrev
    '     myResult(5) = myI.CurItem(0)
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test03a_GetItemSeqAtOffset3()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 80
    
    '     Dim myResult As Variant
    
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myI As Iter
    '     Set myI = Iter(SeqC(10, 20, 30, 40, 50, 60, 70, 80, 90))
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurItem(3)
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test03b_GetItemSeqAtOffsetMinus3()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 20
    
    '     Dim myResult As Variant
    
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myI As Iter
    '     Set myI = Iter(SeqC(10, 20, 30, 40, 50, 60, 70, 80, 90))
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurItem(-3)
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test03c_GetItemSeqIndexGreaterThanSize()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = True
    
    '     Dim myResult As Variant
    
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myI As Iter
    '     Set myI = Iter(SeqC(10, 20, 30, 40, 50, 60, 70, 80, 90))
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurItem(5)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, VBA.IsNull(myResult), CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test03d_GetItemSeqIndexDeforeIndex1()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = True
    
    '     Dim myResult As Variant
    
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myI As Iter
    '     Set myI = Iter(SeqC(10, 20, 30, 40, 50, 60, 70, 80, 90))
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurItem(-5)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, VBA.IsNull(myResult), CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test04a_GetKeySeq()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 5&
    
    '     Dim myResult As Variant
    
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myC As SeqC
    '     Set myC = SeqC(10, 20, 30, 40, 50, 60, 70, 80, 90)
    '     Dim myI As Iter
    '     Set myI = Iter(myC)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurKey(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test04b_GetIndexSeq()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 4&
    
    '     Dim myResult As Variant
    
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myS As SeqC
    '     Set myS = SeqC(10, 20, 30, 40, 50, 60, 70, 80, 90)
    '     Dim myI As Iter
    '     Set myI = Iter(myS)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurOffset(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test05a_GetItemArray()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 50

    '     Dim myArray As Variant
    '     myArray = Array(10, 20, 30, 40, 50, 60, 70, 80, 90)
    '     ReDim Preserve myArray(-4 To 4)
    
    '     Dim myResult As Variant
    
    '     'Act:
    '     Dim myI As Iter
    '     Set myI = Iter(myArray)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurItem(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test05b_GetKeyArray()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 0&
    
    '     Dim myArray As Variant
    '     myArray = Array(10, 20, 30, 40, 50, 60, 70, 80, 90)
    '     ReDim Preserve myArray(-4 To 4)
    
    '     Dim myResult As Variant
    
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myI As Iter
    '     Set myI = Iter(myArray)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurKey(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test05c_GetIndexArray()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 4&
    
    '     Dim myArray As Variant
    '     myArray = Array(10, 20, 30, 40, 50, 60, 70, 80, 90)
    '     ReDim Preserve myArray(-4 To 4)
    
    '     Dim myResult As Variant
    
    
    '     'Act:  Again we need to sort The result SeqC to get the matching array
    '     Dim myI As Iter
    '     Set myI = Iter(myArray)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurOffset(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test06a_GetItemCollection()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 50

    '     Dim myC As Collection
    '     Set myC = New Collection
    '     With myC
    '         .Add 10
    '         .Add 20
    '         .Add 30
    '         .Add 40
    '         .Add 50
    '         .Add 60
    '         .Add 70
    '         .Add 80
    '         .Add 90
    '     End With
    
    '     Dim myI As Iter
    '     Set myI = Iter(myC)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     Dim myResult As Variant
    
    '     'Act:
    '     myResult = myI.CurItem(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test06b_GetKeyCollection()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 5&
    
    '     Dim myC As Collection
    '     Set myC = New Collection
    '     With myC
    '         .Add 10
    '         .Add 20
    '         .Add 30
    '         .Add 40
    '         .Add 50
    '         .Add 60
    '         .Add 70
    '         .Add 80
    '         .Add 90
    '     End With
    
    '     Dim myResult As Variant
    
    
    '     'Act:
    '     Dim myI As Iter
    '     Set myI = Iter(myC)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurKey(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test06c_GetIndexCollection()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 4&
    
    '     Dim myC As Collection
    '     Set myC = New Collection
    '     With myC
    '         .Add 10
    '         .Add 20
    '         .Add 30
    '         .Add 40
    '         .Add 50
    '         .Add 60
    '         .Add 70
    '         .Add 80
    '         .Add 90
    '     End With
    
    '     Dim myI As Iter
    '     Set myI = Iter(myC)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     Dim myResult As Variant
    
    
    '     'Act:
    '     myResult = myI.CurOffset(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test07a_GetItemArrayList()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 50

    '     Dim myC As ArrayList
    '     Set myC = New ArrayList
    '     With myC
    '         .Add 10
    '         .Add 20
    '         .Add 30
    '         .Add 40
    '         .Add 50
    '         .Add 60
    '         .Add 70
    '         .Add 80
    '         .Add 90
    '     End With
    
    '     Dim myI As Iter
    '     Set myI = Iter(myC)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     Dim myResult As Variant
    
    '     'Act:
    '     myResult = myI.CurItem(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test07b_GetKeyArrayList()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 4&
    
    '     Dim myC As ArrayList
    '     Set myC = New ArrayList
    '     With myC
    '         .Add 10
    '         .Add 20
    '         .Add 30
    '         .Add 40
    '         .Add 50
    '         .Add 60
    '         .Add 70
    '         .Add 80
    '         .Add 90
    '     End With
    
    '     Dim myResult As Variant
    
    
    '     'Act:
    '     Dim myI As Iter
    '     Set myI = Iter(myC)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurKey(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test07c_GetIndexArrayList()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 4&
    
    '     Dim myC As ArrayList
    '     Set myC = New ArrayList
    '     With myC
    '         .Add 10
    '         .Add 20
    '         .Add 30
    '         .Add 40
    '         .Add 50
    '         .Add 60
    '         .Add 70
    '         .Add 80
    '         .Add 90
    '     End With
    
    '     Dim myI As Iter
    '     Set myI = Iter(myC)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     Dim myResult As Variant
    
    
    '     'Act:
    '     myResult = myI.CurOffset(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test08a_GetItemDictionary()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 50

    '     Dim myK As KvpC
    '     Set myK = KvpC.Deb
    '     With myK
    '         .Add "Ten", 10
    '         .Add "Twenty", 20
    '         .Add "Thirty", 30
    '         .Add "Forty", 40
    '         .Add "Fifty", 50
    '         .Add "Sixty", 60
    '         .Add "Seventy", 70
    '         .Add "Eighty", 80
    '         .Add "Ninety", 90
    '     End With
    
    '     Dim myI As Iter
    '     Set myI = Iter(myK)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     Dim myResult As Variant
    
    '     'Act:
    '     myResult = myI.CurItem(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test08b_GetKeyDictionary()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = "Fifty"
    
    '     Dim myK As KvpC
    '     Set myK = KvpC.Deb
    '     With myK
    '         .Add "Ten", 10
    '         .Add "Twenty", 20
    '         .Add "Thirty", 30
    '         .Add "Forty", 40
    '         .Add "Fifty", 50
    '         .Add "Sixty", 60
    '         .Add "Seventy", 70
    '         .Add "Eighty", 80
    '         .Add "Ninety", 90
    '     End With
    
    '     Dim myResult As Variant
    
    
    '     'Act:
    '     Dim myI As Iter
    '     Set myI = Iter(myK)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     myResult = myI.CurKey(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '@TestMethod("Iter")
    ' Private Sub Test08c_GetIndexDIctionary()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = 4&
    
    '     Dim myK As KvpC
    '     Set myK = KvpC.Deb
    '     With myK
    '         .Add "Ten", 10
    '         .Add "Twenty", 20
    '         .Add "Thirty", 30
    '         .Add "Forty", 40
    '         .Add "Fifty", 50
    '         .Add "Sixty", 60
    '         .Add "Seventy", 70
    '         .Add "Eighty", 80
    '         .Add "Ninety", 90
    '     End With
    
    '     Dim myI As Iter
    '     Set myI = Iter(myK)
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    '     myI.MoveNext
    
    '     Dim myResult As Variant
    
    
    '     'Act:
    '     myResult = myI.CurOffset(0)
    
    '     'Assert:
    '     Assert.Exact.AreEqual myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub


    ' '

    ' '@TestMethod("Iter")
    ' Private Sub Test09a_GetIndexDictionary()

    '     #If twinbasic Then
    '         CurrentProcedureName = CurrentComponentName & ":" & CurrentProcedureName
    '         CurrentComponentName = CurrentComponentName
    '     #Else
    '         CurrentProcedureName = ErrEx.LiveCallstack.ModuleName & ":" & ErrEx.LiveCallstack.ProcedureName
    '         CurrentComponentName = ErrEx.LiveCallstack.ModuleName
    '     #End If
    '     On Error GoTo TestFail
    
    '     'Arrange:
    '     Dim myExpected As Variant
    '     myExpected = Array(10, 20, 30, 40, 50, 60, 70, 80, 90)
    
    
    '     Dim myK As KvpC
    '     Set myK = KvpC.Deb
    '     With myK
    '         .Add "Ten", 10
    '         .Add "Twenty", 20
    '         .Add "Thirty", 30
    '         .Add "Forty", 40
    '         .Add "Fifty", 50
    '         .Add "Sixty", 60
    '         .Add "Seventy", 70
    '         .Add "Eighty", 80
    '         .Add "Ninety", 90
    '     End With
    
    '     Dim myI As Iter
    '     Set myI = Iter(myK)
    
    
    
    '     Dim myResult As Variant
    '     ReDim myResult(0 To 8)
    
    '     'Act:
    '     Do
            
    '         myResult(myI.CurOffset(0)) = VBA.CVar(myI.CurItem(0))
        
    '     Loop While myI.MoveNext
    
    
    '     'Assert:
    '     Assert.Exact.SequenceEquals myExpected, myResult, CurrentProcedureName
    
    ' TestExit:
    '     '@Ignore UnhandledOnErrorResumeNext
    '     On Error Resume Next
    
    '     Exit Sub
    ' TestFail:
    '     Debug.Print CurrentComponentName, CurrentProcedureName, " raised an error: #" & Err.Number & " - " & Err.Description
    '     Resume TestExit
    ' End Sub

End Module