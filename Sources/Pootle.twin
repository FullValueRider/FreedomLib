Module Pootle
    
Option Explicit
Option Base 0

Type TestType
    x As Long
End Type


Public Sub TestSABounds()
    Dim mySA(1 To 3, 2 To 4, 3 To 5) As Variant
    
    Dim myBounds As Variant = ArrayUtils.Bounds(mySA)
End Sub
Public Sub NameOfTestType()
    Dim myType As TestType
    myType.x = 42
    Debug.Print VBA.TypeName(myType)
End Sub

Public Sub TestIsMissing()
    Dim myA() As Variant
    PrintMissingStatus myA
    
    Dim myB As Variant = Array()
    PrintMissingStatus myB
    
End Sub

Public Sub PrintMissingStatus(Optional ByRef ipMissing As Variant)
    Debug.Print VBA.IsMissing(ipMissing)
End Sub

Sub TestNArrayAssignment()
    Dim myA() As Long
    ' line below gives a runtime error
    myA(1) = 42
End Sub

Public Sub testVarvt()
    ' Demonstrates that arrays containg UDT cannot be converted to a variant
    Dim myVar() As TestType
    ReDim myVar(1 To 5)
    myVar(1).x = 10
    myVar(2).x = 20
    myVar(3).x = 30
    myVar(4).x = 40
    myVar(5).x = 50
    Debug.Print TypeName(myVar)
    Unsafe.ReportSA(myVar)
    Dim myVar2 As Variant
    myVar2 = myVar
    Debug.Print TypeName(myVar2)
    Unsafe.ReportSA(myVar2)
    'myVar2(2).x = 42
    
    Debug.Print TypeName(myArray)
    Dim myArray(1 To 5) As Long
    Unsafe.ReportSA(myArray)
    'Debug.Print myVar(2).x, myVar2(2).x
    Dim myObjects(1 To 5) As PointXY
    Debug.Print TypeName(myObjects)
End Sub

Public Sub TestSADims()
    Dim myA(1 To 5, 1 To 5, 1 To 5) As Integer
    ReportSA myA
End Sub

Public Sub TestArrayListToArray()
    Dim myAL As ArrayList
    Set myAL = New ArrayList
    myAL.Add 10
    myAL.Add 20
    myAL.Add 30
    Dim myItems As Variant = myAL.ToArray
    ' does not respect option base 1
    Debug.Print myItems(0)
	Debug.Print myItems(1)
    
End Sub


Public Sub TestIsArrayInitialized()
    Dim myItem As Long = 42
    'Returns false for a non array.
    Debug.Print IsArrayInitialized(myItem)
End Sub


Public Function ReturnMissing(Optional ByRef ipMissing As Variant) As Variant
    Return ipMissing
End Function

Public Sub MissingVarType()
    'Debug.Print VarType(ReturnMissing)
    Dim myVar As Variant = ReturnMissing
    Debug.Print VarType(myVar), TypeName(myVar)
End Sub
Public Sub ErrTypename()
    Debug.Print TypeName(Err), VarType(Err), VBA.IsObject(Err)
    Debug.Print TypeName(VBA.CVErr(42)), VBA.VarType(VBA.CVErr(42)), VBA.IsObject(VBA.CVErr(42))
    Debug.Print TypeName(Nothing), VBA.VarType(Nothing), VBA.IsObject(Nothing)
    ' Dim myIndex As Long
    ' For myIndex = (Null) To (Null)
    ' 	Debug.Print myIndex
    ' Next
End Sub
	Sub Testadmin()
		
    	Debug.Print VarInfo.IsNotNull(Empty)
        
	End Sub
    
    Sub testarrayreturn()
        Dim myName As String
        Dim myNum As Long
        Array(myName, myNum) = GetName
        Debug.Print myName, myNum
    End Sub
    
    Public Function GetName() As Variant
    	Return Array("MyName", 42)
    End Function
    Public Sub TestVarIsMissing()
    	OptionalVar
    End Sub
    Public Sub OptionalVar(Optional ByRef ipItem As Variant)
    	If IsMissing(ipItem) Then
        	Debug.Print "IsMissing"
        Else
            Debug.Print "Not Is Missing"
    	End If
        
        Dim myI As Integer = 0
        vbaCopyBytes LenB(Of Integer), ByVal VarPtr(myI), ByVal VarPtr(ipItem)
        Debug.Print Hex(myI)
        Dim myL As Long = 0
        vbaCopyBytes LenB(Of Long), ByVal VarPtr(myL), ByVal VarPtr(ipItem) + 8
        Debug.Print myL
    End Sub
	Sub TestNothingNames()
		Debug.Print TypeName(Nothing), VarType(Nothing)
	End Sub
    Sub TestUserFormType()
        '    Dim myF As VBA.userform
        '    Debug.Print TypeName(myC), VarType(myC)
        '    Set myC = New Collection
        '    Debug.Print TypeName(myC), VarType(myC)
       End Sub
	Sub TestCollectionType()
		Dim myC As Collection
		Debug.Print TypeName(myC), VarType(myC)
		Set myC = New Collection
		Debug.Print TypeName(myC), VarType(myC)
	End Sub
	Public Sub errobjectname()
		Debug.Print TypeName(Err), VarType(Err)
		
	End Sub
	Sub testTypename()
		Dim myT As TestType
		Debug.Print TypeName(myT)
		
		Dim myt2 As Variant
		myt2 = CVErr(42)
		Debug.Print TypeName(myt2), VarType(myt2)
	End Sub
	
	Sub TestNothingTypename()
		Debug.Print TypeName(Nothing)
		Dim myC As Collection = Nothing
		Debug.Print TypeName(myC)
	End Sub
	Public Sub TestErrObj()
		Debug.Print VarType(Err), TypeName(Err)
	End Sub
	
    Sub TestForWithNull()
    	Debug.Print False - 1
        Dim myStart As Variant = False
        Dim myEnd As Variant = False - 1
        Dim myIndex As Long
        For myIndex = myStart To myEnd
        	Debug.Print "How the heck did this happen"
        Next
    End Sub
   
	Sub TestType()
		Dim myT As TestType
		myT.x = 42
		Dim myC As Collection = New Collection
		myC.Add myT

		Debug.Print myC.Item(1)
		myT.x = 42
		Debug.Print "My user defined type is ", VBA.VarType(myT), VBA.TypeName(myT)
	End Sub
	
	Sub ArrayBounds()
		Dim myErr As String
		Dim myLbound As Long
		On Error Resume Next
		
		Dim myA As Variant
		myLbound = LBound(myA)
		myErr = Err.Description
		Debug.Print "myA as variant is ", VBA.IsArray(myA), myLbound, Err.Number, myErr
		Err.Clear
		
		Dim myB() As Long
		myLbound = LBound(myB)
		myErr = Err.Description
		Debug.Print "myB() as long is ", VBA.IsArray(myB), myLbound, Err.Number, myErr
		Err.Clear
		
     	Dim myC() As Variant
		myLbound = LBound(myC)
		myErr = Err.Description
		Debug.Print "myC() as Variant is ", VBA.IsArray(myC), myLbound, Err.Number, myErr
		Err.Clear
		
		Dim myD As Variant = Array()
     	myLbound = LBound(myD)
          myErr = Err.Description
          Debug.Print "myD() as Variant = Array() is ", VBA.IsArray(myD), myLbound, UBound(myD), myErr
		  
		Dim myE(0 To 5) As Long
		myLbound = LBound(myE)
		myErr = Err.Description
		Debug.Print "myE(0 to 5) as long is ", VBA.IsArray(myE), myLbound, UBound(myE), myErr
	End Sub
End Module